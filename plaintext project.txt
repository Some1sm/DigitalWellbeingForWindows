// Project Digitalwellbeing.Core
// Core.cs contents
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using static System.Environment;

namespace DigitalWellbeing.Core
{
    public static class ApplicationPath
    {
        static readonly SpecialFolder applicationPath = SpecialFolder.LocalApplicationData;
        static readonly string applicationFolderName = "digital-wellbeing";
        static readonly string imageCacheFolderName = "processicons";
        static readonly string dailyLogsFolderName = "dailylogs";
        static readonly string internalLogsFolder = "internal-logs";
        static readonly string settingsFolder = "settings";
        static readonly string autorunFileName = ".autorun";

        public static readonly string AUTORUN_REGPATH = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run";
#if DEBUG
        public static readonly string AUTORUN_REGKEY = "DigitalWellbeingWPFDEBUG";
#else
        public static readonly string AUTORUN_REGKEY = "DigitalWellbeingWPF";
#endif



        public static string APP_LOCATION
        {
            get => GetFolderPath(applicationPath) + $@"\{applicationFolderName}";
        }

        public static string autorunFilePath
        {
            get => APP_LOCATION + $@"\{autorunFileName}";
        }

        public static string UsageLogsFolder
        {
            get => APP_LOCATION + $@"\{dailyLogsFolderName}\";
        }

        public static string SettingsFolder
        {
            get => APP_LOCATION + $@"\{settingsFolder}\";
        }

        public static string InternalLogsFolder
        {
            get => APP_LOCATION + $@"\{internalLogsFolder}\";
        }

        public static string GetImageCacheLocation(string appName = "")
        {
            string location = APP_LOCATION + $@"\{imageCacheFolderName}\";
            if (appName != "") { location += $"{appName}.ico"; }
            return location;
        }
    }

}

// ForegroundWindowManager.cs content
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;

namespace DigitalWellbeing.Core
{
    public static class ForegroundWindowManager
    {
        public static uint GetForegroundProcessId(IntPtr handle)
        {
            GetWindowThreadProcessId(handle, out uint processId);

            return processId;
        }

        public static string GetActiveProcessName(Process p)
        {
            try
            {
                return p.ProcessName;
            }
            catch
            {
                return null;
            }
        }

        public static string GetActiveProgramName(Process p)
        {
            try
            {
                return p.MainModule.FileVersionInfo.ProductName;
            }
            catch
            {
                return null;
            }
        }

        [DllImport("user32.dll")]
        public static extern IntPtr GetForegroundWindow();

        [DllImport("user32.dll")]
        public static extern bool SetForegroundWindow(IntPtr hWnd);

        [DllImport("user32.dll")]
        public static extern IntPtr GetWindowThreadProcessId(IntPtr hWnd, out uint processId);

        [DllImport("user32.dll")]
        public static extern int GetWindowText(IntPtr hWnd, StringBuilder text, int count);
    }
}

//DigitalWellbeingService.NET4.6 Project
//ActivityLogger.cs contents

using DigitalWellbeing.Core;
using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;
using static System.Environment;

namespace DigitalWellbeingService.NET4._6
{
    public class ActivityLogger
    {
        public static readonly int TIMER_INTERVAL_SEC = 3;

        private string folderPath;
        private string autoRunFilePath;

        public ActivityLogger()
        {
            folderPath = ApplicationPath.UsageLogsFolder;
            autoRunFilePath = ApplicationPath.autorunFilePath;

            Debug.WriteLine(folderPath);
            Debug.WriteLine(autoRunFilePath);

            TryCreateAutoRunFile();
        }

        // AutoRun only
        private void TryCreateAutoRunFile()
        {
            RegistryKey key = Registry.CurrentUser.OpenSubKey(ApplicationPath.AUTORUN_REGPATH);

            bool isAutoRun = key.GetValue(ApplicationPath.AUTORUN_REGKEY) != null ? true : false;

            // Create an empty file that UI will check, do startup things (like hiding window) and delete.
            if (isAutoRun) File.Create(autoRunFilePath).Dispose();
        }

        // Main Timer Logic
        public void OnTimer()
        {
            IntPtr handle = ForegroundWindowManager.GetForegroundWindow();
            uint currProcessId = ForegroundWindowManager.GetForegroundProcessId(handle);
            Process proc = Process.GetProcessById((int)currProcessId);

            UpdateTimeEntry(proc);
        }

        private void UpdateTimeEntry(Process proc)
        {
            string filePath = $"{folderPath}{DateTime.Now:MM-dd-yyyy}.log";

            try
            {
                List<string> lines = File.ReadAllLines(filePath).ToList();

                bool found = false;

                // Update Time Entry
                for (int i = 0; i < lines.Count; i++)
                {
                    if (lines[i].Trim() == string.Empty) continue;

                    string[] cells = lines[i].Split('\t');

                    string processName = cells[0];

                    // If already found, update and break
                    if (proc.ProcessName == processName)
                    {
                        int seconds = 0;
                        string programName = cells.Length > 2 ? cells[2] : "";

                        // Try get seconds
                        int.TryParse(cells[1], out seconds);

                        // Just update the array inline then break
                        seconds += TIMER_INTERVAL_SEC;
                        lines[i] = GetEntryRow(processName, seconds, programName);

                        found = true;
                        break;
                    }
                }

                // If not found, then add at end with starting seconds as interval
                if (!found)
                {
                    string newProcessName = ForegroundWindowManager.GetActiveProcessName(proc);
                    string newProgramName = ForegroundWindowManager.GetActiveProgramName(proc);

                    lines.Add(GetEntryRow(newProcessName, TIMER_INTERVAL_SEC, newProgramName));
                }

                // Update the file again
                File.WriteAllLines(filePath, lines);
            }
            catch (DirectoryNotFoundException)
            {
                Directory.CreateDirectory(folderPath);
            }
            catch (FileNotFoundException)
            {
                // Create empty file
                File.AppendAllLines(filePath, new List<string>());
            }
            catch (IOException ex)
            {
                Console.WriteLine(ex);
                // File might be currently read by UI application for auto-refresh.
                return;
            }
        }

        private string GetEntryRow(string processName, int seconds, string programName)
        {
            return $"{processName}\t{seconds}\t{programName}";
        }
    }
}

//Program.cs contents
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace DigitalWellbeingService.NET4._6
{
    class Program
    {
        static void Main(string[] args)
        {
            ActivityLogger _al = new ActivityLogger();

            while (true)
            {
                _al.OnTimer();
                Thread.Sleep(ActivityLogger.TIMER_INTERVAL_SEC * 1000);
            }
        }
    }
}

// DigitalWellbeingWPF Project

//App.config content 
<?xml version="1.0" encoding="utf-8" ?>
<configuration>
    <configSections>
        <sectionGroup name="userSettings" type="System.Configuration.UserSettingsGroup, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" >
            <section name="DigitalWellbeingWPF.Properties.Settings" type="System.Configuration.ClientSettingsSection, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" allowExeDefinition="MachineToLocalUser" requirePermission="false" />
        </sectionGroup>
    </configSections>
    <startup> 
        <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.6" />
    </startup>
    <userSettings>
        <DigitalWellbeingWPF.Properties.Settings>
            <setting name="MinumumDuration" serializeAs="String">
                <value>00:00:00</value>
            </setting>
            <setting name="ThemeMode" serializeAs="String">
                <value>System</value>
            </setting>
            <setting name="RefreshIntervalSeconds" serializeAs="String">
                <value>30</value>
            </setting>
            <setting name="EnableAutoRefresh" serializeAs="String">
                <value>False</value>
            </setting>
            <setting name="UserExcludedProcesses" serializeAs="Xml">
                <value>
                    <ArrayOfString xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                        xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
                </value>
            </setting>
            <setting name="MinimizeOnExit" serializeAs="String">
                <value>True</value>
            </setting>
        </DigitalWellbeingWPF.Properties.Settings>
    </userSettings>
</configuration>

//App.xaml content
<Application x:Class="DigitalWellbeingWPF.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:DigitalWellbeingWPF"
             xmlns:ui="http://schemas.modernwpf.com/2019"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ui:ThemeResources />
                <ui:XamlControlsResources />
            </ResourceDictionary.MergedDictionaries>

            <Style TargetType="{x:Type Control}">
                <Setter Property="FontFamily" Value="Segoe UI" />
                <Setter Property="FontWeight" Value="Normal" />
            </Style>

            <!-- Custom Colors -->
            <SolidColorBrush x:Key="Material_Gray">#212121</SolidColorBrush>
            <SolidColorBrush x:Key="Material_Orange">#E65100</SolidColorBrush>
            <SolidColorBrush x:Key="Material_Green">#1B5E20</SolidColorBrush>
            <SolidColorBrush x:Key="Material_Purple">#4A148C</SolidColorBrush>
            <SolidColorBrush x:Key="Material_Red">#B71C1C</SolidColorBrush>
            <SolidColorBrush x:Key="Material_Blue">#0D47A1</SolidColorBrush>
            <SolidColorBrush x:Key="Material_Yellow">#F57F17</SolidColorBrush>
        </ResourceDictionary>
    </Application.Resources>
</Application>

//App.xaml.cs content

using DigitalWellbeing.Core;
using DigitalWellbeingWPF.Helpers;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Threading;
using System.Threading.Tasks;
using System.Web;
using System.Windows;
using System.Windows.Threading;

namespace DigitalWellbeingWPF
{
    /// <summary>
    /// Interaction logic for App.xaml
    /// </summary>
    public partial class App : Application
    {
        public static string APPNAME = "Digital Wellbeing for Windows";
        static string APP_GITHUBISSUE_URL = "https://github.com/christiankyle-ching/DigitalWellbeingForWindows/issues/new?";

        public App()
        {
            // Global Exception Handling
            AppDomain currentDomain = AppDomain.CurrentDomain;
            currentDomain.UnhandledException += new UnhandledExceptionEventHandler(GlobalExceptionHandler);

            CheckAndShowCurrentApp();
        }

        private void CheckAndShowCurrentApp()
        {
            Process thisProcess = Process.GetCurrentProcess();

            IEnumerable<Process> similarAppProcesses = Process.GetProcesses().Where(
                p => p.ProcessName == thisProcess.ProcessName && p.SessionId == thisProcess.SessionId);

            if (similarAppProcesses.Count() > 1)
            {
                try
                {
                    IntPtr existingProcessHWnd = similarAppProcesses.Single(p => thisProcess.Id != p.Id).MainWindowHandle;
                    ShowWindow(existingProcessHWnd, 9);
                    bool success = SetForegroundWindow(existingProcessHWnd);
                    ShowMessage_AlreadyRunning(success);
                }
                catch
                {
                    AppLogger.WriteLine("Didn't catch the existing process.");
                    ShowMessage_AlreadyRunning(false);
                }
            }
        }

        static void GlobalExceptionHandler(object sender, UnhandledExceptionEventArgs args)
        {
            Exception e = (Exception)args.ExceptionObject;

            AppLogger.WriteLine(
                $"{e.Message}\n{e.StackTrace}\n" +
                $"{e.InnerException?.Message}\n{e.InnerException?.StackTrace}");

            ShowMessage_ReportBug(e);
        }

        static void ShowMessage_ReportBug(Exception e)
        {
            string body = HttpUtility.UrlEncode($@"
### Describe how to reproduce the problem:
1. ...
2. ...
3. ...
                
<details>
<summary>Exception Message:</summary>

```
{e.Message}
{e.StackTrace}
```
</details>
");

            string newIssueURL =
                APP_GITHUBISSUE_URL +
                $"body={body}" +
                "&labels=bug";

            Console.WriteLine(newIssueURL);
            AppLogger.WriteLine(e.Message);

            // Process unhandled exception
            MessageBoxResult res = MessageBox.Show(
                "Would you like to report this bug?\n\n" +
                e.Message,
                $"{APPNAME}: Application Error",
                MessageBoxButton.YesNo,
                MessageBoxImage.Error);

            if (res == MessageBoxResult.Yes)
            {
                Process.Start(newIssueURL);
            }
        }

        private void ShowMessage_AlreadyRunning(bool success)
        {
            if (success)
            {
                // If window is set, close immediately
                Environment.Exit(0);
            }
            else
            {
                MessageBoxResult res = MessageBox.Show(
                    "Application is already running. Check your notification tray.",
                    APPNAME,
                    MessageBoxButton.OK,
                    MessageBoxImage.Information,
                    MessageBoxResult.OK,
                    MessageBoxOptions.DefaultDesktopOnly);

                if (res != MessageBoxResult.None)
                {
                    Environment.Exit(0);
                }
            }
        }

        [DllImport("user32.dll")]
        static extern bool SetForegroundWindow(IntPtr hWnd);

        [DllImport("user32.dll")]
        static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);
    }
}


//MainWindow.xaml content
<Window x:Class="DigitalWellbeingWPF.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:DigitalWellbeingWPF"
        mc:Ignorable="d"
        xmlns:ui="http://schemas.modernwpf.com/2019"
        ui:WindowHelper.UseModernWindowStyle="True" 
        Height="660" Width="900" MinHeight="660" MinWidth="900"
        Title="Digital Wellbeing For Windows"
        WindowStartupLocation="CenterScreen"
        StateChanged="Window_StateChanged" Closing="Window_Closing">
    <Grid>
        <ui:NavigationView x:Name="NavView"
                           SelectionChanged="NavView_SelectionChanged"
                           IsBackButtonVisible="Collapsed" PaneDisplayMode="LeftCompact"
                           PaneTitle="Digital Wellbeing For Windows">

            <ui:NavigationView.MenuItems>
                <ui:NavigationViewItem Tag="home" Icon="Home" Content="Home"/>
            </ui:NavigationView.MenuItems>

            <Frame x:Name="ContentFrame"
                   NavigationUIVisibility="Hidden" Margin="20,0,20,20"
                   HorizontalContentAlignment="Stretch" VerticalAlignment="Stretch"/>
        </ui:NavigationView>
    </Grid>
    
</Window>
    
//MainWindow.xaml.cs content
using DigitalWellbeing.Core;
using DigitalWellbeingWPF.Helpers;
using DigitalWellbeingWPF.Models;
using DigitalWellbeingWPF.ViewModels;
using DigitalWellbeingWPF.Views;
using ModernWpf.Controls;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Threading;

namespace DigitalWellbeingWPF
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        // Pages
        private DayAppUsagePage usagePage = new DayAppUsagePage();
        private SettingsPage settingsPage = new SettingsPage();

        public MainWindow()
        {
            InitializeComponent();

            // Navigate to Home
            this.NavView.SelectedItem = this.NavView.MenuItems[0];

            // Init Notifier
            Notifier.InitNotifierTimer();
            // Set Default Click Handler for any Notification
            Notifier.SetDefaultNotificationHandler((s, e) => RestoreWindow());

            // Check Autorun File
            InitAutoRun();
        }

        private void NavView_SelectionChanged(NavigationView sender, NavigationViewSelectionChangedEventArgs args)
        {
            NavigationViewItem selectedNavItem = args.SelectedItem as NavigationViewItem;

            if (args.IsSettingsSelected)
            {
                NavView.Header = "Settings";
                settingsPage.OnNavigate();
                ContentFrame.Content = settingsPage;
                return;
            }

            switch (selectedNavItem.Tag)
            {
                case "home":
                    NavView.Header = $"App Usage (Last {AppUsageViewModel.NumberOfDaysToDisplay} Days)";
                    ContentFrame.Content = usagePage;
                    usagePage.OnNavigate();
                    break;
                default:
                    NavView.Header = $"App Usage (Last {AppUsageViewModel.NumberOfDaysToDisplay} Days)";
                    ContentFrame.Content = usagePage;
                    usagePage.OnNavigate();
                    break;
            }
        }

        public void GoToSettings()
        {
            RestoreWindow();
            NavView.SelectedItem = NavView.SettingsItem;
        }

        #region Notifications

        private void Window_StateChanged(object sender, EventArgs e)
        {
            switch (this.WindowState)
            {
                case WindowState.Normal:
                    break;
                case WindowState.Minimized:
                    MinimizeToTray();
                    break;
                case WindowState.Maximized:
                    break;
                default:
                    break;
            }
        }

        public void ShowAlertUsage(AppUsage app, TimeSpan timeLimit, bool warnOnly = false)
        {
            if (warnOnly)
            {
                Notifier.ShowNotification(
                    $"Warning for {app.ProgramName}",
                    $"You have less than 15m using this app. " +
                    $"You've been using this app for {StringHelper.TimeSpanToShortString(app.Duration)}."
                    );
            }
            else
            {
                RestoreWindow();

                AlertWindow alertWnd = new AlertWindow(app, timeLimit);
                alertWnd.WindowState = WindowState.Normal;
                bool? closed = alertWnd.ShowDialog();

                if (closed ?? true) MinimizeToTray();
            }
        }

        public void MinimizeToTray()
        {
            this.Hide();
            Notifier.SetDoubleClickHandler((s, e) => RestoreWindow());
        }

        public void RestoreWindow()
        {
            this.Show();
            this.WindowState = WindowState.Normal;

            // Try Set Foreground, if other apps are on top
            IntPtr currAppHnd = Process.GetCurrentProcess().MainWindowHandle;
            ForegroundWindowManager.SetForegroundWindow(currAppHnd);

            // Trigger refresh
            usagePage.OnNavigate();
        }

        public void ForceClose()
        {
            Application.Current.Shutdown();
        }

        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            if (Properties.Settings.Default.MinimizeOnExit)
            {
                MainWindow mWindow = Application.Current.MainWindow as MainWindow;
                mWindow.MinimizeToTray();

                e.Cancel = true;
            }
        }

        #endregion

        private DispatcherTimer autorunTimer;
        private readonly int AUTORUN_CHECK_INTERVAL = 5;
        private readonly int AUTORUN_CHECK_MAX_RETRY = 3;
        private int autorunCheckCount = 0;

        private string autorunFilePath = ApplicationPath.autorunFilePath;

        private void InitAutoRun()
        {
            autorunTimer = new DispatcherTimer() { Interval = TimeSpan.FromSeconds(AUTORUN_CHECK_INTERVAL) };
            autorunTimer.Tick += (s, e) => CheckAutoRun();

            autorunTimer.Start();
        }

        private void CheckAutoRun()
        {
            if (autorunCheckCount >= AUTORUN_CHECK_MAX_RETRY)
            {
                autorunTimer.Stop();
                return;
            }

            if (File.Exists(autorunFilePath))
            {
                // TODO
                // Do things here that would only run on login / startup,
                // and NOT on consecutive opens of the app

                MainWindow mWindow = Application.Current.MainWindow as MainWindow;
                mWindow.MinimizeToTray();

                File.Delete(autorunFilePath);
            }

            // Increase Check Count
            autorunCheckCount++;
            Console.WriteLine($"Checked Autorun: {autorunCheckCount}");
        }

        public void ReloadUsagePage()
        {
            // New instance to reload all completely
            usagePage = new DayAppUsagePage();
        }
    }
}

//Views subfolder

//AlertWindow.xaml content
<Window x:Class="DigitalWellbeingWPF.Views.AlertWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:DigitalWellbeingWPF.Views"
        mc:Ignorable="d"
        xmlns:ui="http://schemas.modernwpf.com/2019"
        ui:WindowHelper.UseModernWindowStyle="True"
        Title="Time Limit Reached" Height="175" Width="350"
        ResizeMode="NoResize"
        WindowStartupLocation="CenterScreen"
        Topmost="True"
        Background="{DynamicResource SystemControlPageBackgroundAltHighBrush}"
        Foreground="{DynamicResource SystemControlPageTextBaseHighBrush}"
        Closing="Window_Closing">
    <Grid Margin="15">
        <Grid.RowDefinitions>
            <RowDefinition Height="*" />
            <RowDefinition Height="auto"/>
        </Grid.RowDefinitions>

        <!-- Maintain <Run> tag formatting because any newline will show as space -->
        <TextBlock Grid.Row="0" TextWrapping="Wrap" FontSize="14">
            <Run 
                Text="You have exceeded the time limit for " /><Run 
                x:Name="ProgramName" FontWeight="Bold"/><Run
                Text="("/><Run
                x:Name="ProcessName" /><Run
                Text=")"/><Run
                Text=". Your current usage time is "/><Run
                x:Name="UsageTime" FontWeight="Bold"/><Run
                Text=" and your time limit is up to "/><Run
                x:Name="TimeLimit" FontWeight="Bold"/><Run
                Text="."/>
        </TextBlock>

        <ui:SimpleStackPanel Grid.Row="1" HorizontalAlignment="Right" Orientation="Horizontal" Spacing="20">
            <Button x:Name="BtnCloseApp" Content="Close the App" Click="BtnCloseApp_Click" />
            <Button x:Name="BtnOK" Content="OK, Thanks!" Click="BtnOK_Click" Style="{StaticResource AccentButtonStyle}"/>
        </ui:SimpleStackPanel>
    </Grid>
</Window>


// AlertWindow.xaml.cs content

using DigitalWellbeingWPF.Helpers;
using DigitalWellbeingWPF.Models;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Media;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace DigitalWellbeingWPF.Views
{
    /// <summary>
    /// Interaction logic for AlertWindow.xaml
    /// </summary>
    public partial class AlertWindow : Window
    {
        private string _processName = "";

        public AlertWindow(AppUsage appUsage, TimeSpan limit)
        {
            InitializeComponent();

            _processName = appUsage.ProcessName;

            ProgramName.Text = appUsage.ProgramName;
            ProcessName.Text = appUsage.ProcessName;
            UsageTime.Text = StringHelper.TimeSpanToShortString(appUsage.Duration);
            TimeLimit.Text = StringHelper.TimeSpanToShortString(limit);

            BtnCloseApp.Content = $"Exit ({appUsage.ProcessName})";

            SystemSounds.Beep.Play();
        }

        private void BtnOK_Click(object sender, RoutedEventArgs e)
        {
            Close();
        }

        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            DialogResult = true;
        }

        private void BtnCloseApp_Click(object sender, RoutedEventArgs e)
        {
            Process[] ps = Process.GetProcessesByName(_processName);

            try
            {
                foreach (Process p in ps)
                {
                    p.CloseMainWindow();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Cannot close app: {ex.Message}");
            }
            finally
            {
                Close();
            }
        }
    }
}


// ClearDataWindow.xaml content

<Window x:Class="DigitalWellbeingWPF.Views.ClearDataWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:DigitalWellbeingWPF.Views"
        mc:Ignorable="d"
        xmlns:ui="http://schemas.modernwpf.com/2019"
        ui:WindowHelper.UseModernWindowStyle="True"
        Title="Clear Data" Height="250" Width="400"
        ResizeMode="NoResize"
        WindowStartupLocation="CenterScreen"
        Topmost="True"
        Background="{DynamicResource SystemControlPageBackgroundAltHighBrush}"
        Foreground="{DynamicResource SystemControlPageTextBaseHighBrush}">

    <Grid Margin="10">
        <Grid.RowDefinitions>
            <RowDefinition Height="*"/>
            <RowDefinition Height="auto"/>
        </Grid.RowDefinitions>

        <ui:SimpleStackPanel Grid.Row="0" Spacing="10">

            <!-- Daily Logs -->
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="30"/>
                </Grid.ColumnDefinitions>

                <ui:SimpleStackPanel Grid.Column="0">
                    <TextBlock Text="Daily Logs" FontWeight="Bold" Style="{StaticResource BaseTextBlockStyle}"/>
                    <TextBlock Text="Delete all the tracked time data of app usage." Style="{StaticResource CaptionTextBlockStyle}"/>
                </ui:SimpleStackPanel>

                <CheckBox Grid.Column="1" x:Name="chkDailyLogs"
                          Checked="Options_Changed" Unchecked="Options_Changed"/>

            </Grid>

            <!-- Internal Logs -->
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="30"/>
                </Grid.ColumnDefinitions>

                <ui:SimpleStackPanel Grid.Column="0">
                    <TextBlock Text="Internal Logs" FontWeight="Bold" Style="{StaticResource BaseTextBlockStyle}"/>
                    <TextBlock Text="Delete all logs used by this app (Digital Wellbeing) for error tracking." Style="{StaticResource CaptionTextBlockStyle}"/>
                </ui:SimpleStackPanel>

                <CheckBox Grid.Column="1" x:Name="chkInternalLogs"
                          Checked="Options_Changed" Unchecked="Options_Changed"/>

            </Grid>

            <!-- Process Icons -->
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="30"/>
                </Grid.ColumnDefinitions>

                <ui:SimpleStackPanel Grid.Column="0">
                    <TextBlock Text="App Icons" FontWeight="Bold" Style="{StaticResource BaseTextBlockStyle}"/>
                    <TextBlock Text="Delete all cached icons of tracked apps." Style="{StaticResource CaptionTextBlockStyle}"/>
                </ui:SimpleStackPanel>

                <CheckBox Grid.Column="1" x:Name="chkProcessIcons"
                          Checked="Options_Changed" Unchecked="Options_Changed"/>

            </Grid>

        </ui:SimpleStackPanel>

        <ui:SimpleStackPanel Grid.Row="1" Orientation="Horizontal"
                             Spacing="20" HorizontalAlignment="Right">

            <Button Content="Cancel" x:Name="btnCancel" Click="btnCancel_Click"/>

            <Button Content="Delete" x:Name="btnDelete" Style="{StaticResource AccentButtonStyle}"
                    Click="btnDelete_Click" IsEnabled="False"/>

        </ui:SimpleStackPanel>

    </Grid>
</Window>

// ClearDataWindow.xaml.cs content

using DigitalWellbeing.Core;
using DigitalWellbeingWPF.Helpers;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace DigitalWellbeingWPF.Views
{
    /// <summary>
    /// Interaction logic for ClearData.xaml
    /// </summary>
    public partial class ClearDataWindow : Window
    {
        private static string NL = StringHelper.NEWLINE;

        public ClearDataWindow()
        {
            InitializeComponent();
        }

        private void btnDelete_Click(object sender, RoutedEventArgs e)
        {
            List<string> selectedOpts = new List<string>();

            string message = $"Are you sure you want to delete the following:{NL}{NL}";

            if (chkDailyLogs.IsChecked == true) selectedOpts.Add($"• Daily Logs");
            if (chkInternalLogs.IsChecked == true) selectedOpts.Add($"• Internal Logs");
            if (chkProcessIcons.IsChecked == true) selectedOpts.Add($"• App Icons");
            message += string.Join(NL, selectedOpts);

            message += $"{NL}{NL}THIS ACTION CANNOT BE UNDONE!";

            MessageBoxResult res = MessageBox.Show(message, "Confirm Clear Data",
                MessageBoxButton.YesNo, MessageBoxImage.Warning, MessageBoxResult.No);

            if (res == MessageBoxResult.Yes)
            {
                try
                {
                    ClearSelected();
                }
                catch (Exception ex)
                {
                    AppLogger.WriteLine(ex);
                }
                finally
                {
                    if (chkDailyLogs.IsChecked == true)
                    {
                        MainWindow mWindow = Application.Current.MainWindow as MainWindow;
                        mWindow.ReloadUsagePage();
                    }

                    this.Close();
                }
            }
        }

        private void btnCancel_Click(object sender, RoutedEventArgs e)
        {
            this.Close();
        }

        private void ClearSelected()
        {
            if (chkDailyLogs.IsChecked == true)
            {
                StorageManager.TryDeleteFolder(ApplicationPath.UsageLogsFolder);
            }

            if (chkInternalLogs.IsChecked == true)
            {
                StorageManager.TryDeleteFolder(ApplicationPath.InternalLogsFolder);
            }

            if (chkProcessIcons.IsChecked == true)
            {
                IconManager.ClearCachedImages();
            }
        }

        private void Options_Changed(object sender, RoutedEventArgs e)
        {
            bool enabled =
                (chkDailyLogs.IsChecked ?? false) ||
                (chkInternalLogs.IsChecked ?? false) ||
                (chkProcessIcons.IsChecked ?? false);

            btnDelete.IsEnabled = enabled;
        }
    }
}


// DayAppUsagePage.xaml content

<Page x:Class="DigitalWellbeingWPF.Views.DayAppUsagePage"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
      xmlns:local="clr-namespace:DigitalWellbeingWPF.Views"
      xmlns:uc="clr-namespace:DigitalWellbeingWPF.Models.UserControls"
      xmlns:vm="clr-namespace:DigitalWellbeingWPF.ViewModels"
      xmlns:ui="http://schemas.modernwpf.com/2019"
      xmlns:lvc="clr-namespace:LiveCharts.Wpf;assembly=LiveCharts.Wpf"
      mc:Ignorable="d"
      SizeChanged="Page_SizeChanged"
      d:DesignHeight="550" d:DesignWidth="800"
      Background="{DynamicResource SystemControlPageBackgroundAltHighBrush}"
      Foreground="{DynamicResource SystemControlPageTextBaseHighBrush}">

    <Page.Resources>
        <ControlTemplate x:Key="BadgeLabel" TargetType="{x:Type Label}">
            <ControlTemplate.Triggers>
                <DataTrigger Binding="{Binding Path=Content, RelativeSource={RelativeSource Self}}" Value="">
                    <Setter TargetName="borderContainer" Property="Border.Visibility" Value="Collapsed"/>
                </DataTrigger>
            </ControlTemplate.Triggers>
            <Border x:Name="borderContainer" Background="{TemplateBinding Background}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" Padding="5" CornerRadius="10">
                <ContentPresenter HorizontalAlignment="Center"/>
            </Border>
        </ControlTemplate>

        <Style x:Key="ChartTooltip"  TargetType="lvc:DefaultTooltip">
            <Setter Property="Background" Value="{DynamicResource ApplicationPageBackgroundThemeBrush}"/>
            <Setter Property="Foreground" Value="{DynamicResource SystemControlPageTextBaseHighBrush}"/>
        </Style>
    </Page.Resources>

    <Page.DataContext>
        <vm:AppUsageViewModel/>
    </Page.DataContext>

    <!-- TODO: Gets cropped at the bottom somehow by MainWindow margins -->
    <!-- Works only at MainWindow.MinHeight of >= 660 -->
    <Grid Name="MainGrid">

        <Grid.RowDefinitions>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="*" MinHeight="150"/>
            <RowDefinition Height="3*"/>
        </Grid.RowDefinitions>

        <!-- Progress Bar -->
        <Grid Grid.Row="0">
            <Grid.Style>
                <Style TargetType="Grid">
                    <Setter Property="Visibility" Value="Hidden"/>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding IsLoading}" Value="True">
                            <Setter Property="Visibility" Value="Visible"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Grid.Style>

            <ui:ProgressBar IsIndeterminate="True" Margin="0,0,0,5"/>
        </Grid>

        <Grid Grid.Row="1">
            <Grid.RowDefinitions>
                <RowDefinition Height="*"/>
                <RowDefinition Height="auto"/>
            </Grid.RowDefinitions>

            <!-- Previous Days Chart -->
            <lvc:CartesianChart Grid.Row="0" x:Name="WeeklyChart" LegendLocation="None"
                            Series="{Binding WeeklyChartData}"
                            DataClick="WeeklyChart_DataClick"
                            DataTooltip="{x:Null}">
                <lvc:CartesianChart.Resources>
                    <Style TargetType="lvc:ColumnSeries">
                        <Setter Property="DataLabels" Value="True"/>
                        <Setter Property="Foreground" Value="{DynamicResource SystemControlPageTextBaseHighBrush}"/>
                        <Setter Property="FontWeight" Value="Normal"/>
                        <Setter Property="FontSize" Value="14"/>
                        <Setter Property="Fill" Value="{StaticResource SystemControlBackgroundAccentBrush}"/>
                    </Style>
                </lvc:CartesianChart.Resources>
                <lvc:CartesianChart.AxisX>
                    <lvc:Axis Labels="{Binding WeeklyChartLabels}">
                        <lvc:Axis.Separator>
                            <lvc:Separator Step="1" StrokeThickness="0"/>
                        </lvc:Axis.Separator>
                    </lvc:Axis>
                </lvc:CartesianChart.AxisX>
                <lvc:CartesianChart.AxisY>
                    <lvc:Axis Title="Hours" LabelFormatter="{Binding HourFormatter}" MinValue="0">
                        <lvc:Axis.Separator>
                            <lvc:Separator Stroke="{DynamicResource SystemControlBackgroundBaseLowRevealBackgroundBrush}" />
                        </lvc:Axis.Separator>
                    </lvc:Axis>
                </lvc:CartesianChart.AxisY>

            </lvc:CartesianChart>

            <!-- TAGS CHART -->
            <lvc:CartesianChart Grid.Row="1" x:Name="tagChart" Series="{Binding TagsChartData}">
                <lvc:CartesianChart.Resources>
                    <Style TargetType="lvc:StackedRowSeries">
                        <Setter Property="FontSize" Value="12"/>
                        <Setter Property="FontWeight" Value="Medium"/>
                        <Setter Property="Foreground" Value="White"/>
                        <Setter Property="Stroke" Value="Transparent"/>
                        <Setter Property="StrokeThickness" Value="5"/>
                    </Style>
                </lvc:CartesianChart.Resources>

                <lvc:CartesianChart.AxisY>
                    <lvc:Axis ShowLabels="False">
                        <lvc:Axis.Separator>
                            <lvc:Separator Step="1" IsEnabled="False"/>
                        </lvc:Axis.Separator>
                    </lvc:Axis>
                </lvc:CartesianChart.AxisY>
                <lvc:CartesianChart.AxisX>
                    <lvc:Axis MinValue="0" MaxValue="1" ShowLabels="False">
                        <lvc:Axis.Separator>
                            <lvc:Separator IsEnabled="False"/>
                        </lvc:Axis.Separator>
                    </lvc:Axis>
                </lvc:CartesianChart.AxisX>

                <lvc:CartesianChart.DataTooltip>
                    <lvc:DefaultTooltip SelectionMode="OnlySender" Style="{StaticResource ChartTooltip}"/>
                </lvc:CartesianChart.DataTooltip>
            </lvc:CartesianChart>
        </Grid>

        <Grid Grid.Row="2">

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" MinWidth="300" />
                <ColumnDefinition Width="2*" />
            </Grid.ColumnDefinitions>

            <!-- First Column : Chart -->
            <Grid Grid.Column="0" >

                <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="auto"/>
                </Grid.RowDefinitions>

                <Grid Grid.Row="0">

                    <!-- PIE CHART -->
                    <lvc:PieChart x:Name="appUsageChart"
                                  Series="{Binding DayPieChartData}"
                                  DataClick="AppUsageChart_DataClick"
                                  ChartLegend="{x:Null}" InnerRadius="{Binding PieChartInnerRadius}"
                                  DisableAnimations="True" Hoverable="False"
                                  Margin="20"
                                  VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
                        <!-- Keep Margin for Labels -->
                        <lvc:PieChart.Resources>
                            <Style TargetType="lvc:PieSeries">
                                <Setter Property="DataLabels" Value="True"/>
                                <Setter Property="LabelPosition" Value="OutsideSlice"/>
                                <Setter Property="FontSize" Value="14"/>
                                <Setter Property="FontWeight" Value="Normal"/>
                                <Setter Property="Foreground" Value="{DynamicResource SystemControlPageTextBaseHighBrush}"/>

                                <Setter Property="Stroke" Value="{DynamicResource SystemControlPageBackgroundAltHighBrush}"/>
                                <Setter Property="StrokeThickness" Value="5"/>
                            </Style>
                        </lvc:PieChart.Resources>

                        <lvc:PieChart.DataTooltip>
                            <lvc:DefaultTooltip SelectionMode="OnlySender" Style="{StaticResource ChartTooltip}"/>
                        </lvc:PieChart.DataTooltip>

                    </lvc:PieChart>

                </Grid>

                <!-- Minimum Duration -->
                <TextBlock Grid.Row="1" Style="{StaticResource CaptionTextBlockStyle}"
                           Text="{Binding StrMinumumDuration}"
                           TextAlignment="Center"/>
            </Grid>

            <!-- Second Column : Right Side List -->
            <Grid Grid.Column="1">

                <Grid.RowDefinitions>
                    <RowDefinition Height="auto"/>
                    <RowDefinition/>
                </Grid.RowDefinitions>

                <ui:SimpleStackPanel Grid.Row="0">

                    <!-- Control : Total Time -->
                    <TextBlock 
                        Text="{Binding StrTotalDuration, Mode=OneWay}"
                        TextAlignment="Center" Style="{StaticResource TitleTextBlockStyle}"
                    />

                    <!-- Control : Day Picker -->
                    <Grid Margin="0, 10, 0, 10" >
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="auto"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="auto"/>
                        </Grid.ColumnDefinitions>

                        <Button x:Name="BtnPreviousDay" Grid.Column="0"
                                 Click="BtnPreviousDay_Click"
                                IsEnabled="{Binding CanGoPrev}"
                                Content="&lt;"
                                Padding="10,5"
                                FontSize="16" FontWeight="ExtraBold" 
                                FontFamily="Calibri"/>

                        <TextBlock Grid.Column="1"
                            Text="{Binding StrLoadedDate, Mode=OneWay}"
                            TextAlignment="Center" Style="{StaticResource SubtitleTextBlockStyle}"/>

                        <Button x:Name="BtnNextDay" Grid.Column="2"
                                Content="&gt;" Click="BtnNextDay_Click"
                                IsEnabled="{Binding CanGoNext}"
                                Padding="10,5"
                                FontSize="16" FontWeight="ExtraBold" 
                                FontFamily="Calibri"/>
                    </Grid>


                </ui:SimpleStackPanel>

                <!-- Control : List View -->
                <ui:ListView Grid.Row="1" x:Name="AppUsageListView" SelectionMode="Single" ItemsSource="{Binding DayListItems}">

                    <ui:ListView.ItemContainerStyle>
                        <Style TargetType="ui:ListViewItem">
                            <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                        </Style>
                    </ui:ListView.ItemContainerStyle>

                    <ui:ListView.ItemTemplate>
                        <DataTemplate DataType="{x:Type uc:AppUsageListItem}">
                            <Grid Margin="0,5,0,5">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="16"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="auto"/>
                                </Grid.ColumnDefinitions>

                                <!-- App Icon -->
                                <Image Source="{Binding IconSource}" Grid.Column="0" Height="16" Width="16" VerticalAlignment="Top" Margin="0,6"/>

                                <!-- App Details -->
                                <ui:SimpleStackPanel Orientation="Vertical" Grid.Column="1"  Margin="10,0">
                                    <!-- Text Details -->
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="auto"/>
                                        </Grid.ColumnDefinitions>

                                        <WrapPanel Grid.Column="0">
                                            <!-- App Details -->
                                            <TextBlock VerticalAlignment="Center" Style="{StaticResource BaseTextBlockStyle}" 
                                                       Margin="0,0,5,0">
                                                <Run Text="{Binding ProgramName}" /><Run Text=" (" /><Run Text="{Binding ProcessName}" /><Run Text=") " />
                                            </TextBlock>

                                            <!-- Badge -->
                                            <Label Content="{Binding StrAppTag, Mode=OneWay}"
                                                   Background="{Binding BrushAppTag, Mode=OneWay}"
                                                   Template="{StaticResource BadgeLabel}"
                                                   FontSize="12" FontWeight="Bold" Foreground="White" 
                                                   VerticalAlignment="Center"/>
                                        </WrapPanel>

                                        <!-- App Usage Time -->
                                        <TextBlock Grid.Column="1" Text="{Binding StrDuration}"
                                                   VerticalAlignment="Center" TextAlignment="Right"
                                                   Style="{StaticResource CaptionTextBlockStyle}" />
                                    </Grid>

                                    <!-- Usage Bar -->
                                    <ui:ProgressBar Value="{Binding Percentage}" Margin="0,10"/>
                                </ui:SimpleStackPanel>

                                <!-- App Menu Options -->
                                <Button Grid.Column="2" Width="32" Height="32" Margin="0,0,10,0" >
                                    <Button.Content>
                                        <Label Content="•••" FontSize="8" RenderTransformOrigin="0.5,0.5" >
                                            <Label.RenderTransform>
                                                <TransformGroup>
                                                    <ScaleTransform/>
                                                    <SkewTransform/>
                                                    <RotateTransform Angle="90"/>
                                                    <TranslateTransform/>
                                                </TransformGroup>
                                            </Label.RenderTransform>
                                        </Label>
                                    </Button.Content>
                                    <ui:FlyoutService.Flyout>
                                        <ui:MenuFlyout Placement="BottomEdgeAlignedRight">
                                            <MenuItem Header="Set Time Limit" Click="AppUsageListMenuItem_SetTimeLimit" Tag="{Binding ProcessName}"/>
                                            <MenuItem Header="Set App Tag" Click="AppUsageListMenuItem_SetAppTag" Tag="{Binding ProcessName}"/>
                                            <MenuItem Header="Exclude" Click="AppUsageListMenuItem_ExcludeItem" Tag="{Binding ProcessName}"/>
                                        </ui:MenuFlyout>
                                    </ui:FlyoutService.Flyout>
                                </Button>
                            </Grid>
                        </DataTemplate>
                    </ui:ListView.ItemTemplate>

                </ui:ListView>

            </Grid>

        </Grid>

    </Grid>

</Page>


// DayAppUsagePage.xaml.cs content

using DigitalWellbeingWPF.Helpers;
using DigitalWellbeingWPF.Models.UserControls;
using DigitalWellbeingWPF.ViewModels;
using LiveCharts;
using LiveCharts.Wpf;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace DigitalWellbeingWPF.Views
{
    /// <summary>
    /// Interaction logic for DayAppUsagePage.xaml
    /// </summary>
    public partial class DayAppUsagePage : Page
    {
        private readonly AppUsageViewModel vm;

        public DayAppUsagePage()
        {
            InitializeComponent();

            vm = (AppUsageViewModel)DataContext;
        }

        private void BtnPreviousDay_Click(object sender, RoutedEventArgs e)
        {
            vm.LoadPreviousDay();
        }

        private void BtnNextDay_Click(object sender, RoutedEventArgs e)
        {
            vm.LoadNextDay();
        }

        private void AppUsageChart_DataClick(object sender, LiveCharts.ChartPoint chartPoint)
        {
            AppUsageListItem existingListItem = vm.OnAppUsageChart_SelectionChanged(chartPoint);

            AppUsageListItem listItem = null;
            ModernWpf.Controls.ListViewItem listViewItemElement = null;

            try
            {
                if (existingListItem == null && chartPoint.SeriesView.Title == "Other Apps")
                {
                    if (chartPoint.SeriesView.Title == "Other Apps")
                    {
                        listItem = AppUsageListView.Items.Cast<AppUsageListItem>().ToArray().First(item => item.Percentage <= AppUsageViewModel.MinimumPieChartPercentage);
                        listViewItemElement = (ModernWpf.Controls.ListViewItem)AppUsageListView.ItemContainerGenerator.ContainerFromItem(listItem);
                    }
                    else if (chartPoint.SeriesView.Title == "No Data" && chartPoint.Y == 1.0)
                    {
                        return; // No Data
                    }
                }
                else
                {
                    listItem = existingListItem;
                    listViewItemElement = (ModernWpf.Controls.ListViewItem)AppUsageListView.ItemContainerGenerator.ContainerFromItem(existingListItem);
                }

                AppUsageListView.SelectedItem = listItem;
                listViewItemElement.Focus();
            }
            catch (NullReferenceException)
            {
                // Cannot focus on any list item.
            }
            catch (Exception ex)
            {
                AppLogger.WriteLine(ex);
            }
        }

        private void WeeklyChart_DataClick(object sender, LiveCharts.ChartPoint chartPoint)
        {
            vm.WeeklyChart_SelectionChanged((int)chartPoint.X);
        }

        private void Page_SizeChanged(object sender, SizeChangedEventArgs e)
        {
            vm.OnPageResize(appUsageChart.ActualWidth, appUsageChart.ActualHeight);
        }

        private void AppUsageListMenuItem_ExcludeItem(object sender, RoutedEventArgs e)
        {
            string processName = ((MenuItem)sender).Tag.ToString();
            Properties.Settings.Default.UserExcludedProcesses.Add(processName);
            Properties.Settings.Default.Save();

            vm.OnExcludeApp(processName);
        }

        private void AppUsageListMenuItem_SetTimeLimit(object sender, RoutedEventArgs e)
        {
            string processName = ((MenuItem)sender).Tag.ToString();
            vm.OnSetTimeLimit(processName);
        }

        private void AppUsageListMenuItem_SetAppTag(object sender, RoutedEventArgs e)
        {
            string processName = ((MenuItem)sender).Tag.ToString();
            vm.OnSetAppTag(processName);
        }

        public void OnNavigate()
        {
            vm.OnNavigate();
        }

    }
}

// SetAppTagWindow.xaml content

<Window x:Class="DigitalWellbeingWPF.Views.SetAppTagWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:DigitalWellbeingWPF.Views"
        mc:Ignorable="d"
        xmlns:ui="http://schemas.modernwpf.com/2019"
        ui:WindowHelper.UseModernWindowStyle="True"
        Title="Set App Tag" Height="160" Width="500"
        ResizeMode="NoResize"
        WindowStartupLocation="CenterScreen"
        Topmost="True"
        Background="{DynamicResource SystemControlPageBackgroundAltHighBrush}"
        Foreground="{DynamicResource SystemControlPageTextBaseHighBrush}">
    <Window.Resources>
        <ResourceDictionary>
            <Style x:Key="SettingListItemStyle" TargetType="ui:ListViewItem">
                <Setter Property="Padding" Value="12,10"/>
                <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                <Setter Property="VerticalContentAlignment" Value="Stretch"/>
            </Style>
            <Style x:Key="SettingListViewStyle" TargetType="ui:ListView">
                <Setter Property="IsSelectionEnabled" Value="False"/>
            </Style>
        </ResourceDictionary>
    </Window.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition/>
            <RowDefinition Height="auto"/>
        </Grid.RowDefinitions>

        <ui:SimpleStackPanel Grid.Row="0">
            <!-- APP TAG -->
            <ui:ListViewItem Style="{StaticResource SettingListItemStyle}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="auto"/>
                    </Grid.ColumnDefinitions>

                    <ui:SimpleStackPanel Grid.Column="0" Margin="0,0,20,0">
                        <TextBlock x:Name="txtLabel" Text="App Tag" Style="{StaticResource BaseTextBlockStyle}"/>
                        <TextBlock Text="Set the app's category." Style="{StaticResource CaptionTextBlockStyle}"/>
                    </ui:SimpleStackPanel>

                    <ComboBox Grid.Column="1" x:Name="CBTag" SelectionChanged="CBTag_SelectionChanged"/>

                </Grid>
            </ui:ListViewItem>
        </ui:SimpleStackPanel>

        <ui:SimpleStackPanel Grid.Row="1"  Orientation="Horizontal" Spacing="20" HorizontalAlignment="Right" Margin="20">
            <Button Content="Cancel" x:Name="BtnCancel" Click="BtnCancel_Click" />
            <Button Content="Apply" x:Name="BtnApply" Click="BtnApply_Click" Style="{StaticResource AccentButtonStyle}"/>
        </ui:SimpleStackPanel>
    </Grid>
</Window>


// SetAppTagWindow.xaml.cs content

using DigitalWellbeingWPF.Helpers;
using DigitalWellbeingWPF.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace DigitalWellbeingWPF.Views
{
    /// <summary>
    /// Interaction logic for SetAppTag.xaml
    /// </summary>
    public partial class SetAppTagWindow : Window
    {
        string _processName = "";
        AppTag _tag = AppTag.Untagged;
        Dictionary<string, int> appTags;

        public SetAppTagWindow(string processName)
        {
            InitializeComponent();

            _processName = processName;
            this.Title += $" for {_processName}";
            txtLabel.Text += $" for {_processName}";

            LoadCBTagChoices();

            // Reload current tag
            AppTag tag = AppTagHelper.GetAppTag(_processName);
            CBTag.SelectedItem = AppTagHelper.GetTagDisplayName(tag);
        }

        private void LoadCBTagChoices()
        {
            CBTag.Items.Clear();

            appTags = AppTagHelper.GetComboBoxChoices();

            foreach (KeyValuePair<string, int> appTag in appTags)
            {
                CBTag.Items.Add(appTag.Key);
            }
        }

        private void CBTag_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            ComboBox cb = (ComboBox)sender;
            _tag = (AppTag)appTags[cb.SelectedItem.ToString()];

            Console.WriteLine(_processName + ":" + _tag.ToString());
        }

        private void BtnCancel_Click(object sender, RoutedEventArgs e)
        {
            this.Close();
        }

        private void BtnApply_Click(object sender, RoutedEventArgs e)
        {
            SettingsManager.UpdateAppTag(_processName, _tag);

            this.Close();
        }
    }
}


// SetTimeLimitWindow.xaml content

<Window x:Class="DigitalWellbeingWPF.Views.SetTimeLimitWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:DigitalWellbeingWPF.Views"
        mc:Ignorable="d"
        xmlns:ui="http://schemas.modernwpf.com/2019"
        ui:WindowHelper.UseModernWindowStyle="True"
        Title="Set Time Limit" Height="200" Width="500"
        ResizeMode="NoResize"
        WindowStartupLocation="CenterScreen"
        Topmost="True"
        Background="{DynamicResource SystemControlPageBackgroundAltHighBrush}"
        Foreground="{DynamicResource SystemControlPageTextBaseHighBrush}">

    <Window.Resources>
        <ResourceDictionary>
            <Style x:Key="SettingListItemStyle" TargetType="ui:ListViewItem">
                <Setter Property="Padding" Value="12,10"/>
                <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                <Setter Property="VerticalContentAlignment" Value="Stretch"/>
            </Style>
            <Style x:Key="SettingListViewStyle" TargetType="ui:ListView">
                <Setter Property="IsSelectionEnabled" Value="False"/>
            </Style>
        </ResourceDictionary>
    </Window.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition/>
            <RowDefinition Height="auto"/>
        </Grid.RowDefinitions>

        <ui:SimpleStackPanel Grid.Row="0">
            <!-- TIME LIMIT -->
            <!-- Minimum Duration -->
            <ui:ListViewItem Style="{StaticResource SettingListItemStyle}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="auto"/>
                    </Grid.ColumnDefinitions>

                    <ui:SimpleStackPanel Grid.Column="0" Margin="0,0,20,0">
                        <TextBlock Text="Time Limit" Style="{StaticResource BaseTextBlockStyle}"/>
                        <TextBlock Text="Set the app's time limit when to notify you you're exceeding it. Set both to 0 to disable." Style="{StaticResource CaptionTextBlockStyle}"/>
                    </ui:SimpleStackPanel>

                    <ui:SimpleStackPanel Orientation="Horizontal" Grid.Column ="1">
                        <ui:NumberBox x:Name="DurationHours" VerticalAlignment="Center" Maximum="23" Minimum="0" LostFocus="Duration_LostFocus" SpinButtonPlacementMode="Compact" SmallChange="1" LargeChange="3" PlaceholderText="hh" AcceptsExpression="False"/>
                        <Label Content="hr" VerticalAlignment="Center" Margin="10,0,10,0"/>
                        <ui:NumberBox x:Name="DurationMinutes" VerticalAlignment="Center" Maximum="59" Minimum="0" LostFocus="Duration_LostFocus" SpinButtonPlacementMode="Compact"  SmallChange="1" LargeChange="5" PlaceholderText="mm" AcceptsExpression="False"/>
                        <Label Content="min" VerticalAlignment="Center" Margin="10,0,10,0"/>
                    </ui:SimpleStackPanel>
                </Grid>
            </ui:ListViewItem>
        </ui:SimpleStackPanel>

        <ui:SimpleStackPanel Grid.Row="1"  Orientation="Horizontal" Spacing="20" HorizontalAlignment="Right" Margin="20">
            <Button Content="Cancel" x:Name="BtnCancel" Click="BtnCancel_Click" />
            <Button Content="Apply" x:Name="BtnApply" Click="BtnApply_Click" Style="{StaticResource AccentButtonStyle}"/>
        </ui:SimpleStackPanel>
    </Grid>
</Window>


// SetTimeLimitWindow.xaml.cs content

using DigitalWellbeingWPF.Helpers;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using static DigitalWellbeingWPF.Helpers.NumberFormatter;

namespace DigitalWellbeingWPF.Views
{
    /// <summary>
    /// Interaction logic for AddTimeLimit.xaml
    /// </summary>
    public partial class SetTimeLimitWindow : Window
    {
        private string pName = "";

        public SetTimeLimitWindow(string processName)
        {
            InitializeComponent();

            pName = processName;
            this.Title = $"Set Time Limit ({processName})";

            InitFormatter();
            InitValues();
        }

        private void InitFormatter()
        {
            ModernWpf.Controls.INumberBoxNumberFormatter formatter = new WholeNumberFormatter();
            DurationHours.NumberFormatter = formatter;
            DurationMinutes.NumberFormatter = formatter;
        }

        private void InitValues()
        {
            if (SettingsManager.appTimeLimits.ContainsKey(pName))
            {
                TimeSpan timeLimit = TimeSpan.FromMinutes(SettingsManager.appTimeLimits[pName]);
                DurationHours.Value = timeLimit.Hours;
                DurationMinutes.Value = timeLimit.Minutes;
            }
            else
            {
                DurationHours.Value = 0;
                DurationMinutes.Value = 0;
            }
        }

        private void Duration_LostFocus(object sender, RoutedEventArgs e)
        {
            int hrs = (int)DurationHours.Value;
            int min = (int)DurationMinutes.Value;

            hrs = hrs < 0 ? 0 : hrs;
            min = min < 0 ? 0 : min;

            DurationHours.Value = hrs;
            DurationMinutes.Value = min;
        }

        private void BtnApply_Click(object sender, RoutedEventArgs e)
        {
            int hrs = (int)DurationHours.Value;
            int min = (int)DurationMinutes.Value;

            SettingsManager.UpdateAppTimeLimit(pName, new TimeSpan(hrs, min, 0));

            this.Close();
        }

        private void BtnCancel_Click(object sender, RoutedEventArgs e)
        {
            this.Close();
        }
    }
}

// SettingsPage.xaml contents

<Page x:Class="DigitalWellbeingWPF.Views.SettingsPage"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
      xmlns:local="clr-namespace:DigitalWellbeingWPF.Views"
      xmlns:ui="http://schemas.modernwpf.com/2019"
      mc:Ignorable="d" 
      d:DesignHeight="450" d:DesignWidth="800"
      Title="Settings"
      Background="{DynamicResource SystemControlPageBackgroundAltHighBrush}"
      Foreground="{DynamicResource SystemControlPageTextBaseHighBrush}">

    <Page.Resources>
        <ResourceDictionary>
            <Style x:Key="SettingListItemStyle" TargetType="ui:ListViewItem">
                <Setter Property="Padding" Value="12,10"/>
                <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                <Setter Property="VerticalContentAlignment" Value="Stretch"/>
            </Style>
            <Style x:Key="SettingListViewStyle" TargetType="ui:ListView">
                <Setter Property="IsSelectionEnabled" Value="False"/>
            </Style>
        </ResourceDictionary>
    </Page.Resources>

    <Grid>
        <ui:ScrollViewerEx>

            <ui:SimpleStackPanel>
                <!-- APP SETTINGS -->
                <TextBlock Text="App Runtime" Style="{StaticResource SubtitleTextBlockStyle}" Margin="10,0,0,10"/>

                <!-- Run on Startup -->
                <ui:ListViewItem Style="{StaticResource SettingListItemStyle}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="auto"/>
                        </Grid.ColumnDefinitions>

                        <ui:SimpleStackPanel Grid.Column="0" Margin="0,0,20,0">
                            <TextBlock Text="Run on Startup" Style="{StaticResource BaseTextBlockStyle}"/>
                            <TextBlock Text="Runs this app on startup to enable alert notifications." Style="{StaticResource CaptionTextBlockStyle}"/>
                        </ui:SimpleStackPanel>

                        <ui:ToggleSwitch x:Name="EnableRunOnStartup" Toggled="EnableRunOnStartup_Toggled" Grid.Column="1"/>
                    </Grid>
                </ui:ListViewItem>

                <!-- Run on Startup -->
                <ui:ListViewItem Style="{StaticResource SettingListItemStyle}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="auto"/>
                        </Grid.ColumnDefinitions>

                        <ui:SimpleStackPanel Grid.Column="0" Margin="0,0,20,0">
                            <TextBlock Text="Minimize On Exit" Style="{StaticResource BaseTextBlockStyle}"/>
                            <TextBlock Text="Minimize the app on taskbar on exit. Disable to exit the app completely (notifications won't work)."
                                       Style="{StaticResource CaptionTextBlockStyle}"/>
                        </ui:SimpleStackPanel>

                        <ui:ToggleSwitch x:Name="ToggleMinimizeOnExit" Toggled="ToggleMinimizeOnExit_Toggled" Grid.Column="1"/>
                    </Grid>
                </ui:ListViewItem>

                <!-- USAGE DATA -->
                <TextBlock Text="Usage Data" Style="{StaticResource SubtitleTextBlockStyle}" Margin="10,0,0,10"/>

                <!-- EXCLUDED APPS -->
                <ui:ListView Style="{StaticResource SettingListViewStyle}">

                    <ui:ListViewItem Style="{StaticResource SettingListItemStyle}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>

                            <ui:SimpleStackPanel Grid.Column="0" Margin="0,0,20,0">
                                <TextBlock Text="Excluded Apps" Style="{StaticResource BaseTextBlockStyle}"/>
                                <TextBlock Text="Add back excluded apps from the list. Double-click on an app name to add it back." Style="{StaticResource CaptionTextBlockStyle}"/>
                            </ui:SimpleStackPanel>

                            <ListView Grid.Column="1" x:Name="ExcludedAppList" SelectionMode="Single" MouseDoubleClick="ExcludedAppList_MouseDoubleClick" 
                                      Height="150" Margin="0,0,10,0" 
                                      BorderThickness="1" BorderBrush="{DynamicResource SystemControlBackgroundBaseLowRevealBackgroundBrush}"/>
                        </Grid>
                    </ui:ListViewItem>

                </ui:ListView>

                <!-- APP TIME LIMITS DATA -->
                <ui:ListView Style="{StaticResource SettingListViewStyle}">

                    <!-- Refresh Interval -->
                    <ui:ListViewItem Style="{StaticResource SettingListItemStyle}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>

                            <ui:SimpleStackPanel Grid.Column="0" Margin="0,0,20,0">
                                <TextBlock Text="Time Limits per App" Style="{StaticResource BaseTextBlockStyle}"/>
                                <TextBlock Text="Double-click on an app name to set its time limit." Style="{StaticResource CaptionTextBlockStyle}"/>
                            </ui:SimpleStackPanel>

                            <ListView Grid.Column="1" x:Name="AppTimeLimitsList" SelectionMode="Single" MouseDoubleClick="AppTimeLimitsList_MouseDoubleClick" 
                                      Height="150" Margin="0,0,10,0" 
                                      BorderThickness="1" BorderBrush="{DynamicResource SystemControlBackgroundBaseLowRevealBackgroundBrush}"/>
                        </Grid>
                    </ui:ListViewItem>

                </ui:ListView>

                <!-- DISPLAY -->
                <TextBlock Text="Display" Style="{StaticResource SubtitleTextBlockStyle}" Margin="10,0,0,10"/>

                <ui:ListView Style="{StaticResource SettingListViewStyle}">


                    <!-- Amount of days -->
                    <ui:ListViewItem Style="{StaticResource SettingListItemStyle}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="auto"/>
                            </Grid.ColumnDefinitions>


                            <Label Content="Days to show on the graph: (Restart App after pressing 'Apply Changes' for changes to take effect)" VerticalAlignment="Center" Margin="10,0,10,20"/>
                            <ui:NumberBox x:Name="DaysToShowTextBox" Margin="10,50,10,10" HorizontalAlignment="Left" Text="{Binding NumberOfDaysToDisplay, Mode=TwoWay}" />

                        </Grid>
                    </ui:ListViewItem>
                    <!-- Apply Changes button -->
                    <ui:ListViewItem Style="{StaticResource SettingListItemStyle}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="auto"/>
                            </Grid.ColumnDefinitions>

                            <TextBlock Grid.Column="0" />
                            <Button Click="SubmitChange" Margin="10,0,10,10" Content="Apply Changes" />
                            <TextBlock Grid.Column="1"  />
                        </Grid>
                    </ui:ListViewItem>

                    <!-- Minimum Duration -->
                    <ui:ListViewItem Style="{StaticResource SettingListItemStyle}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="auto"/>
                            </Grid.ColumnDefinitions>

                            <ui:SimpleStackPanel Grid.Column="0" Margin="0,0,20,0">
                                <TextBlock Text="Minumum App Duration" Style="{StaticResource BaseTextBlockStyle}"/>
                                <TextBlock Text="Hide all apps that the usage time is below the set duration." Style="{StaticResource CaptionTextBlockStyle}"/>
                            </ui:SimpleStackPanel>

                            <ui:SimpleStackPanel Orientation="Horizontal" Grid.Column ="1">
                                <ui:NumberBox x:Name="MinDuration_Hours" VerticalAlignment="Center" Maximum="23" Minimum="0" LostFocus="MinDuration_LostFocus" SpinButtonPlacementMode="Compact" SmallChange="1" LargeChange="3" PlaceholderText="hh" AcceptsExpression="False"/>
                                <Label Content="hr" VerticalAlignment="Center" Margin="10,0,10,0"/>
                                <ui:NumberBox x:Name="MinDuration_Minutes" VerticalAlignment="Center" Maximum="59" Minimum="0" LostFocus="MinDuration_LostFocus" SpinButtonPlacementMode="Compact"  SmallChange="1" LargeChange="5" PlaceholderText="mm"  AcceptsExpression="False"/>
                                <Label Content="min" VerticalAlignment="Center" Margin="10,0,10,0"/>
                                <ui:NumberBox x:Name="MinDuration_Seconds" VerticalAlignment="Center" Maximum="59" Minimum="0" LostFocus="MinDuration_LostFocus" SpinButtonPlacementMode="Compact"  SmallChange="1" LargeChange="5" PlaceholderText="ss"  AcceptsExpression="False"/>
                                <Label Content="sec" VerticalAlignment="Center" Margin="10,0,10,0"/>
                            </ui:SimpleStackPanel>
                        </Grid>
                    </ui:ListViewItem>

                    <!-- Refresh Interval -->
                    <ui:ListViewItem Style="{StaticResource SettingListItemStyle}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="auto"/>
                            </Grid.ColumnDefinitions>

                            <ui:SimpleStackPanel Grid.Column="0" Margin="0,0,20,0">
                                <TextBlock Text="Auto-Refresh Usage Data" Style="{StaticResource BaseTextBlockStyle}"/>
                                <TextBlock Text="Automatically refresh app usage data." Style="{StaticResource CaptionTextBlockStyle}"/>
                            </ui:SimpleStackPanel>

                            <ui:ToggleSwitch x:Name="EnableAutoRefresh" Toggled="EnableAutoRefresh_Toggled" Grid.Column="1"/>
                        </Grid>
                    </ui:ListViewItem>

                    <ui:ListViewItem Style="{StaticResource SettingListItemStyle}" IsEnabled="{Binding ElementName=EnableAutoRefresh, Path=IsOn}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="auto"/>
                            </Grid.ColumnDefinitions>

                            <ui:SimpleStackPanel Grid.Column="0" Margin="0,0,20,0">
                                <TextBlock Text="Refresh Interval (Seconds)" Style="{StaticResource BaseTextBlockStyle}"/>
                                <TextBlock Text="Set interval of auto-refresh in seconds. Can be set to an expression, (60 * 3) for 3 minutes (Minimum: 30, Maximum: 600)." Style="{StaticResource CaptionTextBlockStyle}"/>
                            </ui:SimpleStackPanel>

                            <ui:SimpleStackPanel Orientation="Horizontal" Grid.Column ="1">
                                <ui:NumberBox x:Name="RefreshInterval" VerticalAlignment="Center" Maximum="600" Minimum="30" AcceptsExpression="True" ValueChanged="RefreshInterval_ValueChanged" SpinButtonPlacementMode="Compact" SmallChange="1" LargeChange="5" PlaceholderText="10 or (60 * 5)"/>
                                <Label Content="sec" VerticalAlignment="Center" Margin="10,0,10,0"/>
                            </ui:SimpleStackPanel>
                        </Grid>
                    </ui:ListViewItem>

                    <!-- Theme Mode -->
                    <ui:ListViewItem Style="{StaticResource SettingListItemStyle}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="auto"/>
                            </Grid.ColumnDefinitions>

                            <ui:SimpleStackPanel Grid.Column="0" Margin="0,0,20,0">
                                <TextBlock Text="Theme Mode" Style="{StaticResource BaseTextBlockStyle}"/>
                                <TextBlock Text="Sets the app theme to Light, Dark, or follow the System-wide setting." Style="{StaticResource CaptionTextBlockStyle}"/>
                            </ui:SimpleStackPanel>

                            <ComboBox Grid.Column="1" x:Name="CBTheme" SelectionChanged="CBTheme_SelectionChanged">
                                <ComboBoxItem x:Name="CBTheme_System">System</ComboBoxItem>
                                <ComboBoxItem x:Name="CBTheme_Light">Light</ComboBoxItem>
                                <ComboBoxItem x:Name="CBTheme_Dark">Dark</ComboBoxItem>
                            </ComboBox>
                        </Grid>
                    </ui:ListViewItem>

                </ui:ListView>
                
                
                <!-- NOTIFICATION -->
                <TextBlock Text="Notifications" Style="{StaticResource SubtitleTextBlockStyle}" Margin="10,0,0,10"/>

                <ui:ListView Style="{StaticResource SettingListViewStyle}">

                    <!-- Focus Assist -->
                    <ui:ListViewItem Style="{StaticResource SettingListItemStyle}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="auto"/>
                            </Grid.ColumnDefinitions>

                            <ui:SimpleStackPanel Grid.Column="0" Margin="0,0,20,0">
                                <TextBlock Text="Focus Assist" Style="{StaticResource BaseTextBlockStyle}"/>
                                <TextBlock Text="Open Focus Assist in Settings." Style="{StaticResource CaptionTextBlockStyle}"/>
                            </ui:SimpleStackPanel>

                            <Button Grid.Column="1" Name="BtnFocusAssist" Click="BtnFocusAssist_Click" Content="Open"/>
                        </Grid>
                    </ui:ListViewItem>

                </ui:ListView>

                <!-- DATA -->
                <TextBlock Text="Data" Style="{StaticResource SubtitleTextBlockStyle}" Margin="10,0,0,10"/>

                <ui:ListView Style="{StaticResource SettingListViewStyle}">

                    <ui:ListViewItem Style="{StaticResource SettingListItemStyle}">
                        <Button Content="Clear Data..." x:Name="BtnClearData" Click="BtnClearData_Click"/>
                    </ui:ListViewItem>

                    <!-- Open Usage Logs Folder -->
                    <ui:ListViewItem Style="{StaticResource SettingListItemStyle}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="auto"/>
                            </Grid.ColumnDefinitions>

                            <ui:SimpleStackPanel Grid.Column="0" Margin="0,0,20,0" VerticalAlignment="Center">
                                <TextBlock Text="Open App Folder" Style="{StaticResource BaseTextBlockStyle}"/>
                            </ui:SimpleStackPanel>

                            <Button Grid.Column="1" Content="Open" x:Name="BtnOpenAppFolder" Click="BtnOpenAppFolder_Click"/>

                        </Grid>
                    </ui:ListViewItem>

                </ui:ListView>

                <!-- ABOUT -->
                <TextBlock Text="About" Style="{StaticResource SubtitleTextBlockStyle}" Margin="10,0,0,10"/>

                <ui:SimpleStackPanel Margin="10,0">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="auto"/>
                        </Grid.ColumnDefinitions>

                        <ui:SimpleStackPanel Grid.Column="0" Orientation="Vertical">

                            <!-- Version Number -->
                            <ui:SimpleStackPanel Orientation="Horizontal" >
                                <TextBlock x:Name="TxtCurrentVersion" Style="{StaticResource BodyTextBlockStyle}" HorizontalAlignment="Left" FontWeight="Light"/>
                                <TextBlock x:Name="TxtLatestVersion" Style="{StaticResource BodyTextBlockStyle}" HorizontalAlignment="Left" FontWeight="Medium"/>
                            </ui:SimpleStackPanel>

                            <!-- Copyright -->
                            <TextBlock x:Name="TxtCopyright" Style="{StaticResource BodyTextBlockStyle}" FontWeight="Light" Visibility="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=Text}"/>

                        </ui:SimpleStackPanel>

                        <!-- Manual Check Update -->
                        <Button Grid.Column="1" x:Name="BtnCheckUpdate" Content="Check for Updates" Click="BtnCheckUpdate_Click" />
                    </Grid>

                    <!-- Links -->
                    <ui:SimpleStackPanel Spacing="0" Margin="0,10,0,0">
                        <ui:HyperlinkButton x:Name="LinkDeveloper" Content="Developer's Website"/>
                        <ui:HyperlinkButton x:Name="LinkSource" Content="Source Code (Github)"/>
                        <ui:HyperlinkButton x:Name="LinkUpdate" Content="Version Downloads (Github Releases)"/>
                    </ui:SimpleStackPanel>
                </ui:SimpleStackPanel>

            </ui:SimpleStackPanel>

        </ui:ScrollViewerEx>

    </Grid>
</Page>

// SettingsPage.xaml.cs contents

using DigitalWellbeing.Core;
using DigitalWellbeingWPF.Helpers;
using DigitalWellbeingWPF.ViewModels;
using Microsoft.Win32;
using ModernWpf;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using static DigitalWellbeingWPF.Helpers.NumberFormatter;

namespace DigitalWellbeingWPF.Views
{
    /// <summary>
    /// Interaction logic for SettingsPage.xaml
    /// </summary>
    public partial class SettingsPage : Page
    {
        private readonly ApplicationTheme? systemTheme;

        private int UPDATE_CHECK_DELAY = 20;
        const string APP_TIMELIMIT_SEPARATOR = "    /    ";

        public SettingsPage()
        {
            InitializeComponent();

            systemTheme = ThemeManager.Current.ApplicationTheme;

            LoadCurrentSettings();

            ModernWpf.Controls.INumberBoxNumberFormatter formatter = new WholeNumberFormatter();
            MinDuration_Hours.NumberFormatter = formatter;
            MinDuration_Minutes.NumberFormatter = formatter;
            MinDuration_Seconds.NumberFormatter = formatter;

            RefreshInterval.NumberFormatter = formatter;

            LoadAboutApp();
        }

        public void OnNavigate()
        {
            LoadExcludedProcessItems();
            LoadAppTimeLimits();
        }

        #region Loader Functions

        private void LoadCurrentSettings()
        {
            TimeSpan minDuration = Properties.Settings.Default.MinumumDuration;
            MinDuration_Hours.Value = minDuration.Hours;
            MinDuration_Minutes.Value = minDuration.Minutes;
            MinDuration_Seconds.Value = minDuration.Seconds;

            EnableRunOnStartup.IsOn = SettingsManager.IsRunningOnStartup();
            ToggleMinimizeOnExit.IsOn = Properties.Settings.Default.MinimizeOnExit;

            EnableAutoRefresh.IsOn = Properties.Settings.Default.EnableAutoRefresh;
            RefreshInterval.Value = Properties.Settings.Default.RefreshIntervalSeconds;

            CBTheme.SelectedItem = CBTheme.FindName($"CBTheme_{Properties.Settings.Default.ThemeMode}");

            LoadExcludedProcessItems();
            LoadAppTimeLimits();
        }

        private void LoadExcludedProcessItems()
        {
            ExcludedAppList.Items.Clear();

            string[] excludedProcesses = Properties.Settings.Default.UserExcludedProcesses.Cast<string>().ToArray();

            foreach (string processName in excludedProcesses)
            {
                ExcludedAppList.Items.Add(processName);
            }
        }

        private void LoadAppTimeLimits()
        {
            AppTimeLimitsList.Items.Clear();

            foreach (KeyValuePair<string, int> timeLimit in SettingsManager.appTimeLimits)
            {
                TimeSpan time = TimeSpan.FromMinutes(timeLimit.Value);
                AppTimeLimitsList.Items.Add($"{timeLimit.Key}{APP_TIMELIMIT_SEPARATOR}{time.Hours}h {time.Minutes}m");
            }
        }
        #endregion

        #region Events
        private void CBTheme_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (e.AddedItems.Count > 0)
            {
                string selectedTheme = ((ComboBoxItem)e.AddedItems[0]).Content.ToString();

                switch (selectedTheme)
                {
                    case "Light":
                        ThemeManager.Current.ApplicationTheme = ApplicationTheme.Light;
                        Properties.Settings.Default.ThemeMode = "Light";
                        break;
                    case "Dark":
                        ThemeManager.Current.ApplicationTheme = ApplicationTheme.Dark;
                        Properties.Settings.Default.ThemeMode = "Dark";
                        break;
                    case "System":
                        ThemeManager.Current.ApplicationTheme = systemTheme;
                        Properties.Settings.Default.ThemeMode = "System";
                        break;
                }

                Properties.Settings.Default.Save();
            }
        }

        private void RefreshInterval_ValueChanged(ModernWpf.Controls.NumberBox sender, ModernWpf.Controls.NumberBoxValueChangedEventArgs args)
        {
            int refreshInterval = (int)sender.Value;

            Properties.Settings.Default.RefreshIntervalSeconds = refreshInterval;
            Properties.Settings.Default.Save();
        }

        private void EnableAutoRefresh_Toggled(object sender, RoutedEventArgs e)
        {
            Properties.Settings.Default.EnableAutoRefresh = EnableAutoRefresh.IsOn;
            Properties.Settings.Default.Save();
        }

        private void SubmitChange(object sender, RoutedEventArgs e)
        {
            int DayAmountlocal = (int)DaysToShowTextBox.Value;
            Properties.Settings.Default.DayAmount = DayAmountlocal;
            Properties.Settings.Default.Save();
            AppUsageViewModel.NumberOfDaysToDisplay = Properties.Settings.Default.DayAmount;

        }

        private void MinDuration_LostFocus(object sender, RoutedEventArgs e)
        {
            int hrs = (int)MinDuration_Hours.Value;
            int min = (int)MinDuration_Minutes.Value;
            int sec = (int)MinDuration_Seconds.Value;

            hrs = hrs < 0 ? 0 : hrs;
            min = min < 0 ? 0 : min;
            sec = sec < 0 ? 0 : sec;

            MinDuration_Hours.Value = hrs;
            MinDuration_Minutes.Value = min;
            MinDuration_Seconds.Value = sec;

            Properties.Settings.Default.MinumumDuration = new TimeSpan(hrs, min, sec);
            Properties.Settings.Default.Save();
        }

        private void ExcludedAppList_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            try
            {
                ListView list = (ListView)sender;

                string processName = list.SelectedItem.ToString();

                Properties.Settings.Default.UserExcludedProcesses.Remove(processName);
                Properties.Settings.Default.Save();

                list.Items.Remove(list.SelectedItem);
            }
            catch (NullReferenceException ex)
            {
                Console.WriteLine($"No item selected: {ex}");
            }
        }

        private void BtnFocusAssist_Click(object sender, RoutedEventArgs e)
        {
            _ = Process.Start("ms-settings:quiethours");
            _ = Process.Start("ms-settings:quietmomentshome");
        }

        private void AppTimeLimitsList_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            try
            {
                ListView list = (ListView)sender;

                string processName = list.SelectedItem.ToString().Split(new[] { APP_TIMELIMIT_SEPARATOR }, StringSplitOptions.None)[0];

                SetTimeLimitWindow window = new SetTimeLimitWindow(processName);
                window.ShowDialog();

                LoadAppTimeLimits();
                Notifier.ResetNotificationForApp(processName);
            }
            catch (NullReferenceException ex)
            {
                Console.WriteLine($"No item selected: {ex}");
            }
        }

        private void EnableRunOnStartup_Toggled(object sender, RoutedEventArgs e)
        {
            SettingsManager.SetRunOnStartup(EnableRunOnStartup.IsOn);
        }

        private void ToggleMinimizeOnExit_Toggled(object sender, RoutedEventArgs e)
        {
            Properties.Settings.Default.MinimizeOnExit = ToggleMinimizeOnExit.IsOn;
            Properties.Settings.Default.Save();
        }

        #endregion

        #region About App

        private void LoadAboutApp()
        {
            LoadLinks();

            Assembly app = Assembly.GetExecutingAssembly();

            // Get Copyright
            object[] attribs = app.GetCustomAttributes(typeof(AssemblyCopyrightAttribute), true);
            TxtCopyright.Text = (attribs.Length > 0) ? ((AssemblyCopyrightAttribute)attribs[0]).Copyright : "";

            // Get Version
            string strVersion = app.GetName().Version.ToString();
            TxtCurrentVersion.Text = $"App version {strVersion}";

            DelayCheckForUpdates();
        }

        private async void DelayCheckForUpdates()
        {
            await Task.Delay(UPDATE_CHECK_DELAY * 1000);

            CheckForUpdates();
        }

        private async void CheckForUpdates(bool manualRefresh = false)
        {
            string latestVersion = await Updater.CheckForUpdates();

            if (latestVersion != "")
            {
                TxtLatestVersion.Text = $" ({latestVersion})";

                Notifier.ShowNotification(
                App.APPNAME,
                    $"Update Available: {latestVersion}",
                    (s, e) => { _ = Process.Start(Updater.appReleasesLink); }
                    );
            }
            else
            {
                if (manualRefresh)
                {
                    Notifier.ShowNotification(App.APPNAME, "No updates available.");
                }
            }
        }

        private void BtnCheckUpdate_Click(object sender, RoutedEventArgs e)
        {
            CheckForUpdates(true);
        }

        private void LoadLinks()
        {
            LinkSource.NavigateUri = new Uri(Updater.appGithubLink);
            LinkUpdate.NavigateUri = new Uri(Updater.appReleasesLink);
            LinkDeveloper.NavigateUri = new Uri(Updater.appWebsiteLink);
        }
        #endregion

        private void BtnOpenAppFolder_Click(object sender, RoutedEventArgs e)
        {
            Process.Start(ApplicationPath.APP_LOCATION);
        }

        private void BtnClearData_Click(object sender, RoutedEventArgs e)
        {
            ClearDataWindow wnd = new ClearDataWindow();
            wnd.ShowDialog();
        }
    }
}


// ViewModels subfolder
//AppUsageViewModel.cs contents
using DigitalWellbeing.Core;
using DigitalWellbeingWPF.Helpers;
using DigitalWellbeingWPF.Models;
using DigitalWellbeingWPF.Models.UserControls;
using DigitalWellbeingWPF.Views;
using LiveCharts;
using LiveCharts.Configurations;
using LiveCharts.Wpf;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Media;
using System.Windows.Threading;

namespace DigitalWellbeingWPF.ViewModels
{
    
    
    public class AppUsageViewModel : INotifyPropertyChanged
    {

        #region Configurations

        //
        public static int NumberOfDaysToDisplay { get; set; } = Properties.Settings.Default.DayAmount;
        
        public static readonly int MinimumPieChartPercentage = 10;
        #endregion

        #region Temporary 
        private readonly static string folderPath = ApplicationPath.UsageLogsFolder;

        private DispatcherTimer refreshTimer;
        #endregion

        #region Formatters
        public Func<double, string> HourFormatter { get; set; }
        private Func<ChartPoint, string> PieChartLabelFormatter { get; set; }
        private Func<ChartPoint, string> TagChartFormatter { get; set; }
        #endregion

        #region String Bindings
        // Loaded Date
        public DateTime LoadedDate = DateTime.Now.Date;
        public string StrLoadedDate
        {
            get => (LoadedDate.Date == DateTime.Now.Date) ?
                "Today, " + this.LoadedDate.ToString("dddd") :
                this.LoadedDate.ToString("dddd, MMM dd yyyy");
        }
        
        // Total Duration
        public TimeSpan TotalDuration = new TimeSpan();
        public string StrTotalDuration
        {
            get
            {
                
                string output = "";
                if (TotalDuration.Hours > 0) { output += $"{TotalDuration.Hours} hr, "; }
                output += $"{TotalDuration.Minutes} min";
                return output;
            }
        }

        // MinimumDuration
        public string StrMinumumDuration
        {
            get
            {
                return Properties.Settings.Default.MinumumDuration.TotalSeconds <= 0
                    ? ""
                    : $"Apps that run less than {StringHelper.TimeSpanToString(Properties.Settings.Default.MinumumDuration)} are hidden.";
            }
        }
        #endregion

        #region Collections
        public ObservableCollection<List<AppUsage>> WeekAppUsage { get; set; } // Week's App Usage
        public SeriesCollection WeeklyChartData { get; set; } // Week's App Usage
        public DateTime[] WeeklyChartLabelDates { get; set; }
        public string[] WeeklyChartLabels { get; set; }
        public SeriesCollection DayPieChartData { get; set; } // Pie Chart Data
        public ObservableCollection<AppUsageListItem> DayListItems { get; set; } // List Items
        public SeriesCollection TagsChartData { get; set; } // Tags's Combined Usage

        // Excluded Processes
        private static readonly string[] excludeProcesses = new string[]
        {
            // Exclude Self
            "DigitalWellbeingWPF",

            // Windows-specific Processes
            "explorer",
            "SearchHost",
            "Idle",
            "StartMenuExperienceHost",
            "ShellExperienceHost",
            "dwm",
            "LockApp",
            "msiexec",
            "ApplicationFrameHost",
            
            // Custom Indicators (from Service)
            "*LAST",
        };
        private static string[] userExcludedProcesses;
        #endregion

        #region Getters with Bindings
        public event PropertyChangedEventHandler PropertyChanged;
        public bool CanGoNext { get => LoadedDate.Date < DateTime.Now.Date; }
        public bool CanGoPrev { get => LoadedDate.Date > DateTime.Now.AddDays(-NumberOfDaysToDisplay + 1).Date; }
        public bool IsLoading { get; set; }
        public double PieChartInnerRadius
        {
            get; set;
        }

        public void OnPageResize(double width, double height)
        {
            double area = width * height;
            PieChartInnerRadius = Math.Sqrt(area / 10);
            OnPropertyChanged(nameof(PieChartInnerRadius));
            
        }

        public bool IsWeeklyDataLoaded = false;
        #endregion

        public AppUsageViewModel()
        {
            InitCollections();
            InitFormatters();

            LoadUserExcludedProcesses();
            
            LoadWeeklyData();
            InitAutoRefreshTimer();
        }
        

        #region Init Functions
        private void InitCollections()
        {
            WeekAppUsage = new ObservableCollection<List<AppUsage>>();
            WeeklyChartData = new SeriesCollection();
            WeeklyChartLabels = new string[0];
            WeeklyChartLabelDates = new DateTime[0];
            TagsChartData = new SeriesCollection();

            DayPieChartData = new SeriesCollection();
            DayListItems = new ObservableCollection<AppUsageListItem>();
        }

        private void InitFormatters()
        {
            HourFormatter = (hours) => hours.ToString("F1") + " h";
            //PieChartLabelFormatter = (chartPoint) => string.Format("{0:F2} min/s", chartPoint.Y);
            PieChartLabelFormatter = (chartPoint) => string.Format("{0}", chartPoint.SeriesView.Title);

            TagChartFormatter = (chartPoint) => string.Format("{0}", chartPoint.SeriesView.Title);
        }

        private void InitAutoRefreshTimer()
        {
            int refreshInterval = Properties.Settings.Default.RefreshIntervalSeconds;
            TimeSpan intervalDuration = TimeSpan.FromSeconds(refreshInterval);
            refreshTimer = new DispatcherTimer() { Interval = intervalDuration };
            refreshTimer.Tick += (s, e) => TryRefreshData();
        }
        private void SetDayAmount() 
        {
            int NumberOfDaysToDisplay = Properties.Settings.Default.DayAmount;
            MessageBox.Show("please work2");
            Console.WriteLine(NumberOfDaysToDisplay);
            LoadWeeklyData();
        }

        private void LoadUserExcludedProcesses()
        {
            userExcludedProcesses = Properties.Settings.Default.UserExcludedProcesses.Cast<string>().ToArray();
        }

        public async void LoadWeeklyData()
        {
            
            SetLoading(true);

            try
            {
                DateTime minDate = DateTime.Now.AddDays(-NumberOfDaysToDisplay);

                List<List<AppUsage>> weekUsage = new List<List<AppUsage>>();
                ChartValues<double> hours = new ChartValues<double>();
                List<string> labels = new List<string>();
                List<DateTime> loadedDates = new List<DateTime>();

                // Load last week's data
                for (int i = 1; i <= NumberOfDaysToDisplay; i++)
                {
                    DateTime date = minDate.AddDays(i).Date;

                    // Store App Usage List
                    List<AppUsage> appUsageList = await GetData(date);
                    List<AppUsage> filteredUsageList = appUsageList.Where(appUsageFilter).ToList();
                    filteredUsageList.Sort(appUsageSorter);

                    // Calculate Total Hours
                    TimeSpan totalDuration = TimeSpan.Zero;
                    foreach (AppUsage app in filteredUsageList)
                    {
                        totalDuration = totalDuration.Add(app.Duration);
                    }

                    weekUsage.Add(filteredUsageList);
                    hours.Add(totalDuration.TotalHours);
                    labels.Add(date.ToString("ddd"));
                    loadedDates.Add(date);
                }

                // Add all values at once
                foreach (List<AppUsage> dayUsage in weekUsage) { WeekAppUsage.Add(dayUsage); } // AppUsage
                // Bar Chart : Data
                WeeklyChartData.Add(new ColumnSeries { Values = hours });
                // Bar Chart : Labels
                WeeklyChartLabels = labels.ToArray();
                // Bar Chart : Labels as DateTime for SelectionChanged
                WeeklyChartLabelDates = loadedDates.ToArray();

                IsWeeklyDataLoaded = true;

                WeeklyChart_SelectionChanged(WeekAppUsage.Count - 1);
            }
            catch (Exception ex)
            {
                AppLogger.WriteLine($"Load Weekly Data Exception {ex}");
            }
            finally
            {
                SetLoading(false);
            }
        }
        #endregion

        #region Events
        public void OnNavigate()
        {
            ReloadSettings();
            TryRefreshData();
            
        }

        public void OnExcludeApp(string processName)
        {
            try
            {
                LoadUserExcludedProcesses();

                // Remove List Item
                AppUsageListItem listItem = DayListItems.Single(item => item.ProcessName == processName);
                DayListItems.Remove(listItem);

                // Remove in Pie: Might throw due to aggregated data in Pie > Other Apps
                PieSeries pieChartSeries = (PieSeries)DayPieChartData.Single(pieSeries => pieSeries.Title == processName);
                DayPieChartData.Remove(pieChartSeries);
            }
            catch (Exception ex)
            {
                // Cannot remove from pie
                Console.WriteLine(ex);
            }
            finally
            {
                RefreshTagChart();
            }
        }

        public void OnSetTimeLimit(string processName)
        {
            SetTimeLimitWindow window = new SetTimeLimitWindow(processName);
            window.ShowDialog();

            Notifier.ResetNotificationForApp(processName);
        }

        public void OnSetAppTag(string processName)
        {
            SetAppTagWindow window = new SetAppTagWindow(processName);
            window.ShowDialog();

            try
            {
                AppUsageListItem item = DayListItems.Single(i => i.ProcessName == processName);
                item._AppTag = AppTagHelper.GetAppTag(processName);
            }
            catch { }

            RefreshListItems();
            RefreshTagChart();
        }

        public AppUsageListItem OnAppUsageChart_SelectionChanged(ChartPoint chartPoint)
        {
            try
            {
                return DayListItems.Single(listItem =>
                {
                    return listItem.ProcessName == chartPoint.SeriesView.Title;
                });
            }
            catch
            {
                return null;
            }
        }

        public void WeeklyChart_SelectionChanged(int index)
        {
            try
            {
                DateTime selectedDate = WeeklyChartLabelDates.ElementAt(index);
                
                // If selected date is already shown (loaded) and it is not the date today
                // Avoid Refresh, but Refresh if date is today
                if (selectedDate == LoadedDate && selectedDate != DateTime.Now.Date)
                {
                    return;
                }
                else
                {
                    LoadedDate = selectedDate;

                    TryRefreshData();
                    UpdatePieChartAndList(WeekAppUsage.ElementAt(index));
                    
                }
            }
            catch (IndexOutOfRangeException)
            {
                AppLogger.WriteLine("Element index exceeded in WeeklyChart");
            }
            catch { }
        }
        #endregion

        // * -1 for desc, default is asc
        Comparison<AppUsage> appUsageSorter = (a, b) => a.Duration.CompareTo(b.Duration) * -1;
        Func<AppUsage, bool> appUsageFilter = (a) => !IsProcessExcluded(a.ProcessName);

        private async void TryRefreshData()
        {
            
            // If weekly data not loaded yet, do not refresh
            if (!IsWeeklyDataLoaded) return;

            // Refresh Data only if loaded date is set today
            // Only refresh data when the selected date is today,
            // Else, no point in auto-refreshing non-changing data.
            if (DateTime.Now.Date == LoadedDate.Date)
            {
                try
                {
                    List<AppUsage> appUsageList = await GetData(LoadedDate.Date);

                    // Also update source, which is the last in list
                    WeekAppUsage[WeekAppUsage.Count - 1] = appUsageList;

                    List<AppUsage> filteredUsageList = appUsageList.Where(appUsageFilter).ToList();
                    filteredUsageList.Sort(appUsageSorter);
                    UpdatePieChartAndList(filteredUsageList);
                    
                    // Refresh Bar Graph
                    WeeklyChartData.ElementAt(0).Values[GetDayIndex(LoadedDate.Date)] = TotalDuration.TotalHours;
                }
                catch
                {
                    AppLogger.WriteLine("Skip Refresh");
                }
            }
        }
        
        private void RefreshListItems()
        {
            
            foreach (AppUsageListItem item in DayListItems)
            {
                item.Refresh();
            }
        }

        private void RefreshTagChart()
        {
            
            List<AppUsage> usageList = GetDayUsage(LoadedDate);

            // Load Tags
            SeriesCollection tempTagChartData = new SeriesCollection();
            Dictionary<string, double> tagHours = new Dictionary<string, double>();
            double totalMinutes = 0;

            // Load empty first
            foreach (string tagName in Enum.GetNames(typeof(AppTag)))
            {
                tagHours.Add(tagName, 0);
            }

            // Combine hours of different tags
            foreach (AppUsage app in usageList)
            {
                string appTag = EnumUtils.GetEnumName(AppTagHelper.GetAppTag(app.ProcessName));
                tagHours[appTag] += app.Duration.TotalMinutes;

                totalMinutes += app.Duration.TotalMinutes;
            }

            // Sort from largest to smallest
            List<KeyValuePair<string, double>> sortedTagHours = tagHours.ToList();
            sortedTagHours.Sort((a, b) => a.Value.CompareTo(b.Value) * -1);
            // Then place AppTag.Untagged at last
            int untaggedIndex = sortedTagHours.IndexOf(sortedTagHours.Single(t => t.Key == EnumUtils.GetEnumName(AppTag.Untagged)));
            sortedTagHours.Add(sortedTagHours[untaggedIndex]);
            sortedTagHours.RemoveAt(untaggedIndex);

            // Prevents dividing by zero
            if (totalMinutes > 0)
            {
                foreach (KeyValuePair<string, double> tagHour in sortedTagHours)
                {
                    double percentage = tagHour.Value / totalMinutes;

                    tempTagChartData.Add(new StackedRowSeries()
                    {
                        Values = new ChartValues<double> { percentage },
                        DataLabels = percentage >= 0.1,
                        Title = tagHour.Key,
                        LabelPoint = TagChartFormatter,
                        Fill = AppTagHelper.GetTagColor(tagHour.Key),
                    });
                }
            }
            else
            {
                tempTagChartData.Add(new StackedRowSeries()
                {
                    Values = new ChartValues<double> { 1.0 },
                    DataLabels = true,
                    Title = "No Data",
                    LabelPoint = TagChartFormatter,
                    Fill = AppTagHelper.GetTagColor(AppTag.Untagged),
                });
            }

            TagsChartData.Clear();
            TagsChartData.AddRange(tempTagChartData);
        }
        // this function loads everytime a menu window changes Possible apply button.
        private void ReloadSettings()
        {
            
            // Apply new settings
            bool enableAutoRefresh = Properties.Settings.Default.EnableAutoRefresh;
            if (enableAutoRefresh)
            {
                if (!refreshTimer.IsEnabled)
                {
                    refreshTimer.Start();
                }
            }
            else
            {
                try
                {
                    refreshTimer.Stop();
                }
                catch (NullReferenceException)
                {
                    // No timer to start with
                    AppLogger.WriteLine("No Timer");
                }
            }
            LoadUserExcludedProcesses();
        }

        #region Functions
        public void LoadPreviousDay()
        {
            WeeklyChart_SelectionChanged(GetDayIndex(LoadedDate.AddDays(-1)));
        }

        public void LoadNextDay()
        {
            WeeklyChart_SelectionChanged(GetDayIndex(LoadedDate.AddDays(1)));
        }

        private void UpdatePieChartAndList(List<AppUsage> appUsageList)
        {
            SetLoading(true);

            List<AppUsage> filteredUsageList = appUsageList.Where(appUsageFilter).ToList();

            try
            {
                TotalDuration = TimeSpan.Zero;

                PieSeries noDataSeries = new PieSeries()
                {
                    Title = "No Data",
                    Fill = Brushes.LightGray,
                    Values = new ChartValues<double> { 1 },
                    LabelPoint = PieChartLabelFormatter,
                };
                PieSeries otherProcessesSeries = new PieSeries()
                {
                    Title = "Other Apps",
                    LabelPoint = PieChartLabelFormatter,
                };
                double otherProcessesTotalMinutes = 0;

                SeriesCollection tempPieChartData = new SeriesCollection();
                ObservableCollection<AppUsageListItem> tempListItems = new ObservableCollection<AppUsageListItem>();

                // Calculate Total Duration
                foreach (AppUsage app in filteredUsageList)
                {
                    TotalDuration = TotalDuration.Add(app.Duration);
                }

                // Add List Items and Chart Items
                foreach (AppUsage app in filteredUsageList)
                {
                    int percentage = (int)Math.Round(app.Duration.TotalSeconds / TotalDuration.TotalSeconds * 100);

                    string durationStr = StringHelper.TimeSpanToString(app.Duration);

                    string label = app.ProcessName;
                    if (durationStr != "") { label += $" ({durationStr})"; }

                    // Add Chart Points
                    if (app.Duration > Properties.Settings.Default.MinumumDuration)
                    {
                        if (percentage <= MinimumPieChartPercentage)
                        {
                            otherProcessesTotalMinutes += app.Duration.TotalMinutes;
                        }
                        else
                        {
                            tempPieChartData.Add(new PieSeries()
                            {
                                Title = app.ProcessName,
                                Values = new ChartValues<double> { app.Duration.TotalMinutes },
                                LabelPoint = PieChartLabelFormatter,
                            });
                        }
                    }

                    // Add List Item
                    if (app.Duration > Properties.Settings.Default.MinumumDuration)
                    {
                        tempListItems.Add(new AppUsageListItem(app.ProcessName, app.ProgramName, app.Duration, percentage, AppTagHelper.GetAppTag(app.ProcessName)));
                    }
                }

                // Add Chart Point (Other Processes)
                if (otherProcessesTotalMinutes > 0)
                {
                    otherProcessesSeries.Values = new ChartValues<double> { otherProcessesTotalMinutes };
                    tempPieChartData.Add(otherProcessesSeries);
                }

                // Update UI Data
                DayPieChartData.Clear();
                if (tempPieChartData.Count > 0)
                {
                    DayPieChartData.AddRange(tempPieChartData);
                }
                else
                {
                    DayPieChartData.Add(noDataSeries);
                }

                DayListItems.Clear();
                foreach (AppUsageListItem item in tempListItems)
                {
                    DayListItems.Add(item);
                }

                RefreshTagChart();
            }
            catch (Exception ex)
            {
                AppLogger.WriteLine(ex);
            }
            finally
            {
                NotifyChange();
                SetLoading(false);
            }
        }
        #endregion

        #region Getters
        private int GetDayIndex(DateTime date)
        {
            return Array.FindIndex(WeeklyChartLabelDates, labelDates => labelDates.Date == date.Date);
        }

        private List<AppUsage> GetDayUsage(DateTime date)
        {
            List<AppUsage> appUsageList = WeekAppUsage[GetDayIndex(date)];
            List<AppUsage> filteredUsageList = appUsageList.Where(appUsageFilter).ToList();
            filteredUsageList.Sort(appUsageSorter);

            return filteredUsageList;
        }

        public static bool IsProcessExcluded(string processName)
        {
            return excludeProcesses.Contains(processName) || userExcludedProcesses.Contains(processName);
        }

        public static async Task<List<AppUsage>> GetData(DateTime date)
        {
            int retryCount = 0;
            const int maxRetries = 3;

            do
            {
                // Always retry with an empty list
                List<AppUsage> appUsageList = new List<AppUsage>();

                try
                {
                    string text = await Task.Run(() => File.ReadAllText($"{folderPath}{date:MM-dd-yyyy}.log")); ;
                    string[] lines = text.Split(new[] { Environment.NewLine }, StringSplitOptions.None);

                    // Parse .log data ROWS
                    for (int i = 0; i < lines.Length; i++)
                    {
                        try
                        {
                            // Skip empty rows
                            if (lines[i].Trim() == string.Empty) continue;

                            string[] cells = lines[i].Split('\t');

                            string processName = cells[0];
                            int seconds = 0;
                            string programName = cells.Length > 2 ? cells[2] : "";

                            // Try get seconds
                            int.TryParse(cells[1], out seconds);

                            appUsageList.Add(
                                new AppUsage(processName, programName, TimeSpan.FromSeconds(seconds))
                            );
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine("SKIP READING ROW: " + ex);
                        }
                    }

                    return appUsageList;
                }
                catch (FileNotFoundException)
                {
                    // If not found, just return []
                    AppLogger.WriteLine($"CANNOT FIND: {folderPath}{date:MM-dd-yyyy}.log");
                    return appUsageList;
                }
                catch (DirectoryNotFoundException)
                {
                    // If not found, just return []
                    Directory.CreateDirectory(folderPath);
                    return appUsageList;
                }
                catch (IOException)
                {
                    // TODO: RETRY HERE
                    retryCount++;
                }
                catch (Exception ex)
                {
                    // Global Exception: throw to report
                    AppLogger.WriteLine(ex.Message);
                    throw;
                }
            } while (retryCount < maxRetries);

            // If after 3 retries and still cannot access, just return empty
            return new List<AppUsage>();
        }
        #endregion

        #region Setters
        private void SetLoading(bool value)
        {
            if (value == false)
            {
                // Apply delay on hiding LoadingProgress
                TimeSpan delay = TimeSpan.FromMilliseconds(1000);

                var delayTimer = new DispatcherTimer() { Interval = delay };
                delayTimer.Tick += (s, e) =>
                {
                    IsLoading = value;
                    OnPropertyChanged(nameof(IsLoading));
                    delayTimer.Stop();
                };
                delayTimer.Start();
            }
            else
            {
                IsLoading = value;
                OnPropertyChanged(nameof(IsLoading));
            }
        }
        #endregion

        public void NotifyChange()
        {
            OnPropertyChanged(nameof(StrLoadedDate));
            OnPropertyChanged(nameof(StrTotalDuration));
            OnPropertyChanged(nameof(StrMinumumDuration));
            OnPropertyChanged(nameof(CanGoNext));
            OnPropertyChanged(nameof(CanGoPrev));

            RefreshListItems();
        }
        
        private void OnPropertyChanged([CallerMemberName] String propertyName = "")
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
                private void ApplyButton_Click(object sender, RoutedEventArgs e)
        {
            // Refresh data based on updated days
            LoadWeeklyData();
        }
    }
}

// Models subfolder

//AppTag.cs contents

using DigitalWellbeingWPF.Helpers;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Media;

namespace DigitalWellbeingWPF.Models
{
    /*
     * When removing a tag, don't re-use the numbers already in here.
     * Just comment them and use a new int for ID.
     * You can rename the enum string, though keep in mind that this might confuse you for previous tagged apps.
     * Underscores (_) can be replaced by spaces ( ). See: `EnumUtils.GetEnumDisplayName`
     */
    public enum AppTag
    {
        Untagged = 0,
        Work = 1,
        Education = 2,
        Games = 3,
        Entertainment = 4,
        Communication = 5,
        Utility = 6,
    }

    public static class AppTagHelper
    {
        /*
         * Match int ID from AppTag enum
         * 
         * Colors From 2014 Material Design Palette
         * Color[900] for dark colors, since foreground is always white
         * https://material.io/design/color/the-color-system.html#tools-for-picking-colors
         */
        public static Dictionary<int, Brush> AppTagColors = new Dictionary<int, Brush>()
        {
            {0, (Brush)Application.Current.TryFindResource("Material_Gray") ?? Brushes.Gray}, // None, Gray,
            {1, (Brush)Application.Current.TryFindResource("Material_Orange") ?? Brushes.Orange}, // Work, Orange,
            {2, (Brush)Application.Current.TryFindResource("Material_Green") ?? Brushes.Green}, // Education, Green
            {3, (Brush)Application.Current.TryFindResource("Material_Purple") ?? Brushes.Purple}, // Games, Purple
            {4, (Brush)Application.Current.TryFindResource("Material_Red") ?? Brushes.Red}, // Entertainment, Red
            {5, (Brush)Application.Current.TryFindResource("Material_Blue") ?? Brushes.Blue}, // Communication, Blue
            {6, (Brush)Application.Current.TryFindResource("Material_Yellow") ?? Brushes.Yellow}, // Utility, Yellow
        };

        public static Dictionary<string, int> GetComboBoxChoices()
        {
            Dictionary<string, int> tags = new Dictionary<string, int>();

            foreach (AppTag tag in Enum.GetValues(typeof(AppTag)))
            {
                // Name: Enum
                tags.Add(EnumUtils.GetEnumName(tag), (int)tag);
            }

            return tags;
        }

        public static AppTag GetAppTag(string processName)
        {
            try
            {
                return SettingsManager.appTags[processName];
            }
            catch
            {
                return AppTag.Untagged;
            }
        }

        public static string GetTagDisplayName(AppTag appTag)
        {
            if (appTag == AppTag.Untagged) return "";

            return EnumUtils.GetEnumName(appTag);
        }

        public static Brush GetTagColor(AppTag appTag)
        {
            return AppTagColors[(int)appTag];
        }

        public static Brush GetTagColor(string appTagName)
        {
            AppTag _tag = EnumUtils.GetEnumValueFromName<AppTag>(appTagName);
            return AppTagColors[(int)_tag];
        }
    }
}


//AppUsage.cs Contents

using DigitalWellbeingWPF.Helpers;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;

namespace DigitalWellbeingWPF.Models
{
    public class AppUsage : INotifyPropertyChanged
    {
        public string ProgramName { get; set; }
        public string ProcessName { get; set; } // Process name : Use as identifier
        public TimeSpan Duration { get; set; }

        public AppUsage(string processName, string programName, TimeSpan duration)
        {
            this.ProcessName = processName;
            this.ProgramName = programName != string.Empty ? programName : StringHelper.TitleCaseWhenLower(processName);
            this.Duration = duration;
        }

        public event PropertyChangedEventHandler PropertyChanged;

        private void OnPropertyChanged([CallerMemberName] String propertyName = "")
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void Refresh()
        {
            OnPropertyChanged(nameof(ProcessName));
            OnPropertyChanged(nameof(Duration));
        }
    }
}


// UserControls subfolder inside Models
//AppUsageListItem.cs contents

using DigitalWellbeingWPF.Helpers;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Media;

namespace DigitalWellbeingWPF.Models.UserControls
{
    public class AppUsageListItem : INotifyPropertyChanged
    {
        public int Percentage { get; set; }

        public string ProcessName { get; set; }
        public string ProgramName { get; set; }
        public TimeSpan Duration { get; set; }
        public string StrDuration { get => StringHelper.TimeSpanToString(Duration); }
        public ImageSource IconSource { get; set; }

        public AppTag _AppTag { get; set; }
        public string StrAppTag { get => AppTagHelper.GetTagDisplayName(this._AppTag); }
        public Brush BrushAppTag { get => AppTagHelper.GetTagColor(this._AppTag); }

        public AppUsageListItem(string processName, string programName, TimeSpan duration, int percentage, AppTag appTag)
        {
            ProcessName = processName;
            ProgramName = programName;
            Duration = duration;
            Percentage = percentage;
            IconSource = IconManager.GetIconSource(processName);
            _AppTag = appTag;
        }

        public event PropertyChangedEventHandler PropertyChanged;

        private void OnPropertyChanged([CallerMemberName] String propertyName = "")
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public void Refresh()
        {
            OnPropertyChanged(nameof(ProcessName));
            OnPropertyChanged(nameof(Percentage));

            OnPropertyChanged(nameof(Duration));
            OnPropertyChanged(nameof(StrDuration));

            OnPropertyChanged(nameof(_AppTag));
            OnPropertyChanged(nameof(StrAppTag));
            OnPropertyChanged(nameof(BrushAppTag));
        }

    }
}


//Helpers subfolder

//AppLogger.cs contents

using DigitalWellbeing.Core;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DigitalWellbeingWPF.Helpers
{
    public static class AppLogger
    {
        public static void WriteLine(object logObj, bool logToFile = true)
        {
            string path = $"{ApplicationPath.InternalLogsFolder}{DateTime.Now:MM-dd-yyyy}.log";

            try
            {
                string[] lines = new string[] { $"[{DateTime.Now}]\t{logObj}" };

                Debug.WriteLine(lines[0]);

                if (logToFile)
                {
                    File.AppendAllLines(path, lines);
                }
            }
            catch (DirectoryNotFoundException)
            {
                Directory.CreateDirectory(ApplicationPath.InternalLogsFolder);
            }
            catch { }
        }
    }
}


//EnumUtils.cs content
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DigitalWellbeingWPF.Helpers
{
    public static class EnumUtils
    {
        public static string GetEnumName<T>(T _enum)
        {
            try
            {
                return Enum.GetName(typeof(T), _enum);
            }
            catch
            {
                return "";
            }
        }

        public static string GetEnumDisplayName<T>(T _enum)
        {
            return GetEnumName(_enum).Replace('_', ' ');
        }

        public static T GetEnumValueFromName<T>(string _name)
        {
            try
            {
                return (T)Enum.Parse(typeof(T), _name);
            }
            catch
            {
                throw;
            }
        }
    }
}

//IconManager.cs Contents

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Interop;
using System.Windows.Media.Imaging;
using static System.Environment;
using DigitalWellbeingWPF.Helpers;
using DigitalWellbeing.Core;

namespace DigitalWellbeingWPF.Helpers
{
    public static class IconManager
    {
        public static BitmapSource GetIconSource(string appName)
        {
            CreateAppDirectories();

            BitmapSource cachedImage = GetCachedImage(appName);
            if (cachedImage != null) return cachedImage;

            Process[] processes = Process.GetProcessesByName(appName);

            if (processes.Length > 0)
            {
                try
                {
                    Icon icon = Icon.ExtractAssociatedIcon(processes[0].MainModule.FileName);
                    Bitmap bmpIcon = icon.ToBitmap();

                    CacheImage(bmpIcon, appName);
                    return Imaging.CreateBitmapSourceFromHIcon(icon.Handle, Int32Rect.Empty, BitmapSizeOptions.FromEmptyOptions());
                }
                catch (Win32Exception)
                {
                    AppLogger.WriteLine($"Not enough permissions. Run as Administrator.");
                }
                catch (Exception ex)
                {
                    AppLogger.WriteLine($"ICON - NOT FOUND: {ex}");
                }

            }

            return null;
        }

        private static void CreateAppDirectories()
        {
            Directory.CreateDirectory(ApplicationPath.GetImageCacheLocation());
        }

        private static void CacheImage(Bitmap icon, string appName)
        {
            try
            {
                FileStream outputStream = new FileStream(ApplicationPath.GetImageCacheLocation(appName), FileMode.Create);
                icon.Save(outputStream, ImageFormat.Icon);
                icon.Dispose();
            }
            catch (Exception ex)
            {
                AppLogger.WriteLine($"CACHE - FAILED: {ex}");
            }
        }

        private static BitmapImage GetCachedImage(string appName)
        {
            try
            {
                BitmapImage img = new BitmapImage();
                img.BeginInit();
                img.CacheOption = BitmapCacheOption.OnLoad;
                img.UriSource = new Uri(ApplicationPath.GetImageCacheLocation(appName));
                img.EndInit();

                return img;
            }
            catch (Exception ex)
            {
                AppLogger.WriteLine($"CACHE - NOT FOUND: {ex}");
            }

            return null;
        }

        public static bool ClearCachedImages()
        {
            return StorageManager.TryDeleteFolder(ApplicationPath.GetImageCacheLocation());
        }
    }
}


//Notifier.cs contents

using DigitalWellbeingWPF.Models;
using DigitalWellbeingWPF.ViewModels;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Media.Imaging;
using System.Windows.Threading;
using DigitalWellbeing.Core;
using DigitalWellbeingWPF.Views;

namespace DigitalWellbeingWPF.Helpers
{
    public static class Notifier
    {
        public static System.Windows.Forms.NotifyIcon trayIcon;
        private static System.Windows.Forms.ContextMenuStrip ctx;
        private static int NOTIFICATION_TIMOUT_SECONDS = 10;

        private static TimeSpan warningLimit = TimeSpan.FromMinutes(15);

#if DEBUG
        private static int CHECK_INTERVAL = 10;
#else
        private static int CHECK_INTERVAL = 60;
#endif

        private static EventHandler defaultNotificationHandler;

        static Notifier()
        {
            trayIcon = new System.Windows.Forms.NotifyIcon();
            trayIcon.Icon = Properties.Resources.app_logo;

            ctx = new System.Windows.Forms.ContextMenuStrip();
            trayIcon.ContextMenuStrip = ctx;

            MainWindow mWindow = Application.Current.MainWindow as MainWindow;

            // Context Menu : Open App
            ctx.Items.Add("Open", null, (s, e) =>
            {
                mWindow.RestoreWindow();
            });

            // Context Menu : Settings
            ctx.Items.Add("Settings", null, (s, e) =>
            {
                mWindow.GoToSettings();
            });

            // Context Menu : Exit App
            ctx.Items.Add("Exit", null, (s, e) =>
            {
                mWindow.ForceClose();
            });

            // Always visible for notifications to work
            trayIcon.Visible = true;
        }

        public static void ShowNotification(string title, string message, EventHandler clickHandler = null, System.Windows.Forms.ToolTipIcon icon = System.Windows.Forms.ToolTipIcon.None)
        {
            trayIcon.BalloonTipTitle = title;
            trayIcon.BalloonTipText = message;
            trayIcon.BalloonTipIcon = icon;

            trayIcon.BalloonTipClicked += clickHandler ?? defaultNotificationHandler;

            trayIcon.ShowBalloonTip(NOTIFICATION_TIMOUT_SECONDS * 1000);
        }

        public static void SetDoubleClickHandler(EventHandler doubleClickHandler)
        {
            trayIcon.DoubleClick += doubleClickHandler;
        }

        public static void SetDefaultNotificationHandler(EventHandler baloonTipHandlerClick)
        {
            defaultNotificationHandler = baloonTipHandlerClick;
            trayIcon.BalloonTipClicked += baloonTipHandlerClick;
        }

        #region App Time Limit Checker

        private static DispatcherTimer notifierTimer;
        private static List<string> notifiedApps = new List<string>();
        private static List<string> warnNotifiedApps = new List<string>();

        public static void InitNotifierTimer()
        {
            TimeSpan intervalDuration = TimeSpan.FromSeconds(CHECK_INTERVAL);

            notifierTimer = new DispatcherTimer() { Interval = intervalDuration };
            notifierTimer.Tick += (s, e) => CheckForExceedingAppTimeLimits();

            notifierTimer.Start();
        }

        private static async void CheckForExceedingAppTimeLimits()
        {
            // Get Source Data
            List<AppUsage> todayUsage = await AppUsageViewModel.GetData(DateTime.Now);
            var _limits = SettingsManager.appTimeLimits;

            // Get Active Process / Program
            IntPtr _hnd = ForegroundWindowManager.GetForegroundWindow();
            uint _procId = ForegroundWindowManager.GetForegroundProcessId(_hnd);
            Process _proc = Process.GetProcessById((int)_procId);
            string activeProcessName = ForegroundWindowManager.GetActiveProcessName(_proc);

            try
            {
                AppUsage currApp = todayUsage.Single(app => app.ProcessName == activeProcessName);

                // Skip if already notified
                if (notifiedApps.Contains(currApp.ProcessName)) return;

                // If app has time limit
                if (_limits.ContainsKey(currApp.ProcessName))
                {
                    TimeSpan timeLimit = TimeSpan.FromMinutes(_limits[currApp.ProcessName]);

                    bool reachedWarnLimit = currApp.Duration > (timeLimit - warningLimit);
                    bool reachedTimeLimit = currApp.Duration > timeLimit;

                    if (reachedTimeLimit && !notifiedApps.Contains(currApp.ProcessName))
                    {
                        warnNotifiedApps.Add(currApp.ProcessName);
                        notifiedApps.Add(currApp.ProcessName);

                        (Application.Current.MainWindow as MainWindow).ShowAlertUsage(currApp, timeLimit);
                    }
                    else if (reachedWarnLimit && !warnNotifiedApps.Contains(currApp.ProcessName))
                    {
                        warnNotifiedApps.Add(currApp.ProcessName);

                        (Application.Current.MainWindow as MainWindow).ShowAlertUsage(currApp, timeLimit, true);
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }

        public static void ResetNotificationForApp(string processName)
        {
            notifiedApps.RemoveAll(p => p == processName);
            warnNotifiedApps.RemoveAll(p => p == processName);
        }
        #endregion
    }
}


//NumberFormatter.cs contents

using ModernWpf.Controls;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DigitalWellbeingWPF.Helpers
{
    public class NumberFormatter
    {
        public class WholeNumberFormatter : INumberBoxNumberFormatter
        {
            public string FormatDouble(double value)
            {
                return string.Format("{0}", value);
            }

            public double? ParseDouble(string text)
            {
                if (double.TryParse(text, out double result))
                {
                    return Math.Round(result, 0);
                }
                return null;
            }
        }
    }
}


//SettingsManager.cs content
using DigitalWellbeing.Core;
using DigitalWellbeingWPF.Models;
using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Media;

namespace DigitalWellbeingWPF.Helpers
{
    static class SettingsManager
    {
        static string folderPath = ApplicationPath.SettingsFolder;

        static SettingsManager()
        {
            LoadAppTimeLimits();
            LoadAppTags();
        }

        #region App Time Limits
        public static Dictionary<string, int> appTimeLimits = new Dictionary<string, int>();
        static string appTimeLimitsFilePath = folderPath + "app-time-limits.txt";

        private static async void LoadAppTimeLimits()
        {
            appTimeLimits.Clear();

            try
            {
                string text = await Task.Run(() => File.ReadAllText(appTimeLimitsFilePath));

                string[] rows = text.Split('\n');

                foreach (string row in rows)
                {
                    try
                    {
                        string[] cells = row.Split('\t');

                        string processName = cells[0];
                        int timeLimitInMins = int.Parse(cells[1]);

                        appTimeLimits.Add(processName, timeLimitInMins);
                    }
                    catch (IndexOutOfRangeException)
                    {
                        // No indicated cells, possibly last line in txt
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex);
                        throw;
                    }
                }
            }
            catch (FileNotFoundException)
            {
                AppLogger.WriteLine($"CANNOT FIND: {appTimeLimitsFilePath}");

                // Saves an empty one
                SaveAppTimeLimits();
            }
            catch (DirectoryNotFoundException)
            {
                Directory.CreateDirectory(folderPath);
            }
            catch (IOException)
            {
                Console.WriteLine("Can't read, file is still being used");
            }
            catch (Exception ex)
            {
                AppLogger.WriteLine(ex.Message);
            }
        }

        private static void SaveAppTimeLimits()
        {
            List<string> lines = new List<string>();

            foreach (KeyValuePair<string, int> timeLimit in appTimeLimits)
            {
                lines.Add($"{timeLimit.Key}\t{timeLimit.Value}");
            }

            File.WriteAllLines(appTimeLimitsFilePath, lines);
        }

        public static void UpdateAppTimeLimit(string processName, TimeSpan timeLimit)
        {
            int totalMins = (int)timeLimit.TotalMinutes;

            // Remove time limit if set to 0 mins
            if (totalMins <= 0)
            {
                if (appTimeLimits.ContainsKey(processName))
                {
                    appTimeLimits.Remove(processName);
                }
            }
            // Else, update or add new
            else
            {
                if (appTimeLimits.ContainsKey(processName))
                {
                    appTimeLimits[processName] = totalMins;
                }
                else
                {
                    appTimeLimits.Add(processName, totalMins);
                }
            }

            SaveAppTimeLimits();
        }

        #endregion

        #region App Tags

        public static Dictionary<string, AppTag> appTags = new Dictionary<string, AppTag>();
        static string appTagsPath = folderPath + "app-tags.txt";

        private static async void LoadAppTags()
        {
            appTags.Clear();

            try
            {
                string text = await Task.Run(() => File.ReadAllText(appTagsPath));

                string[] rows = text.Split('\n');

                foreach (string row in rows)
                {
                    try
                    {
                        string[] cells = row.Split('\t');

                        string processName = cells[0];
                        AppTag appTag = (AppTag)int.Parse(cells[1]);

                        appTags.Add(processName, appTag);
                    }
                    catch (IndexOutOfRangeException)
                    {
                        // No indicated cells, possibly last line in txt
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex);
                        throw;
                    }
                }
            }
            catch (FileNotFoundException)
            {
                AppLogger.WriteLine($"CANNOT FIND: {appTagsPath}");

                // Saves an empty one
                SaveAppTags();
            }
            catch (DirectoryNotFoundException)
            {
                Directory.CreateDirectory(folderPath);
            }
            catch (IOException)
            {
                Console.WriteLine("Can't read, file is still being used");
            }
            catch (Exception ex)
            {
                AppLogger.WriteLine(ex.Message);
            }
        }

        private static void SaveAppTags()
        {
            List<string> lines = new List<string>();

            foreach (KeyValuePair<string, AppTag> appTag in appTags)
            {
                lines.Add($"{appTag.Key}\t{(int)appTag.Value}");
            }

            File.WriteAllLines(appTagsPath, lines);
        }

        public static void UpdateAppTag(string processName, AppTag appTag)
        {
            // Remove tag if set to NONE
            if (appTag == AppTag.Untagged)
            {
                if (appTags.ContainsKey(processName))
                {
                    appTags.Remove(processName);
                }
            }
            // Else, update or add new
            else
            {
                if (appTags.ContainsKey(processName))
                {
                    appTags[processName] = appTag;
                }
                else
                {
                    appTags.Add(processName, appTag);
                }
            }

            SaveAppTags();
        }

        #endregion

        #region Run on Startup

        public static void SetRunOnStartup(bool enabled)
        {
            RegistryKey key = Registry.CurrentUser.OpenSubKey(ApplicationPath.AUTORUN_REGPATH, true);
            Assembly asm = Assembly.GetExecutingAssembly();

            if (enabled)
            {
                // Set registry key
                key.SetValue(ApplicationPath.AUTORUN_REGKEY, asm.Location);
            }
            else
            {
                key.DeleteValue(ApplicationPath.AUTORUN_REGKEY);
            }
        }

        public static bool IsRunningOnStartup()
        {
            RegistryKey key = Registry.CurrentUser.OpenSubKey(ApplicationPath.AUTORUN_REGPATH);

            return key.GetValue(ApplicationPath.AUTORUN_REGKEY) != null ? true : false;
        }

        #endregion

    }
}

//StorageManager.cs contents
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DigitalWellbeingWPF.Helpers
{
    public static class StorageManager
    {
        public static bool TryDeleteFolder(string folderPath)
        {
            try
            {
                Directory.Delete(folderPath, true);
                return true;
            }
            catch (Exception ex)
            {
                AppLogger.WriteLine(ex.Message);
                return false;
            }
        }


        private static string GetFolderSize(string folderPath)
        {
            try
            {
                Process cmd = new Process();
                cmd.StartInfo.FileName = "cmd.exe";
                cmd.StartInfo.RedirectStandardInput = true;
                cmd.StartInfo.RedirectStandardOutput = true;
                cmd.StartInfo.CreateNoWindow = true;
                cmd.StartInfo.UseShellExecute = false;
                cmd.Start();

                cmd.StandardInput.WriteLine($@"dir /s {folderPath}");
                cmd.StandardInput.Flush();
                cmd.StandardInput.Close();

                string _out = cmd.StandardOutput.ReadToEnd();
                cmd.WaitForExit();

                string[] output = _out.Replace("\r", "").Split('\n');
                string[] lineWithTotal = output[output.Length - 4].Split(' ');
                ulong totalBytes = ulong.Parse(lineWithTotal[lineWithTotal.Length - 2].Replace(",", ""));

                string strSize = StringHelper.ShortenBytes(totalBytes); // Divide by 1MB in bytes

                return strSize;
            }
            catch (Exception ex)
            {
                // Not so important
                AppLogger.WriteLine(ex);

                return "";
            }
        }
    }
}


//StringHelper.cs contents

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DigitalWellbeingWPF.Helpers
{
    public static class StringHelper
    {
        public static string NEWLINE = Environment.NewLine;

        public static string TimeSpanToString(TimeSpan duration)
        {
            string durationStr = (int)duration.Hours > 0 ? $"{duration.Hours}h " : "";
            durationStr += (int)duration.TotalMinutes > 0 ? $"{duration.Minutes}m " : "";
            durationStr += (int)duration.TotalSeconds > 0 ? $"{duration.Seconds}s " : "";

            return durationStr.Trim();
        }

        private static readonly TextInfo txtInfo = new CultureInfo("en-US", false).TextInfo;
        public static string TitleCaseWhenLower(string processName)
        {
            return processName.Any(char.IsUpper) ? processName : txtInfo.ToTitleCase(processName);
        }

        public static string TimeSpanToShortString(TimeSpan duration)
        {
            return $"{duration.Hours}h {duration.Minutes}m";
        }

        public static string ShortenBytes(ulong bytes)
        {
            ulong MB = bytes / 1048576;
            ulong GB = MB / 1024;

            if (GB > 0)
            {
                return $"{GB} GB";
            }
            else
            {
                return $"{MB} MB";
            }
        }

    }
}


//Updater.cs contents

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace DigitalWellbeingWPF.Helpers
{
    public static class Updater
    {
        public static readonly string appGithubLink = "https://github.com/christiankyle-ching/DigitalWellbeingForWindows";
        public static readonly string appReleasesLink = "https://github.com/christiankyle-ching/DigitalWellbeingForWindows/releases/latest";
        public static readonly string appWebsiteLink = "https://christiankyleching.vercel.app/works.html?scrollTo=digital-wellbeing-windows";

        static readonly HttpClient client = new HttpClient();
        static readonly string appGithubLink_ReleasesAPIURL =
                    "https://api.github.com/repos/christiankyle-ching/DigitalWellbeingForWindows/releases/latest";

        // Versions should be:
        // 1.0.1        -> OK
        // 1.0.1.0      -> OK
        // 1.0.1.0.1    -> NOT OK
        static readonly int VERSION_SEGMENT_LENGTH = 4;

        public static async Task<string> GetLatestVersion()
        {
            try
            {
                client.DefaultRequestHeaders.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
                client.DefaultRequestHeaders.UserAgent.TryParseAdd("request");

                string responseBody = await client.GetStringAsync(appGithubLink_ReleasesAPIURL);

                Regex rx = new Regex(@"""tag_name"":""([a-z0-9.]*)""");
                Match match = rx.Match(responseBody);

                if (match.Success)
                {
                    return match.Groups[1].Value;
                }
            }
            catch (HttpRequestException e)
            {
                Console.WriteLine("\nException Caught!");
                Console.WriteLine("Message :{0} ", e.Message);
            }

            return "";
        }

        public static bool IsUpdateAvailable(int[] curVersion, int[] latestVersion)
        {
            // Check new version from major(left) to minor(right) rev
            for (int i = 0; i < VERSION_SEGMENT_LENGTH; i++)
            {
                if (latestVersion[i] == curVersion[i])
                {
                    continue;
                }
                else if (latestVersion[i] > curVersion[i])
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }

            return false;
        }

        public static int[] VersionStringToIntArray(string version)
        {
            List<int> segments = new List<int>();
            string[] tmp = version.Split('.');

            // Get all version segments first in int
            // It is guaranteed that every split has a number because
            // A version like "3..2" is not a given
            foreach (string seg in tmp)
            {
                segments.Add(int.Parse(seg));
            }

            // Fill empty slots with -1
            // Make them all 4 in length
            for (int i = 0; i < VERSION_SEGMENT_LENGTH - segments.Count; i++)
            {
                segments.Add(-1);
            }

            return segments.ToArray();
        }

        public static string VersionArrayToString(int[] version)
        {
            string strVersion = "";

            for (int i = 0; i < version.Length; i++)
            {
                // Append version number and dot if greater than 0, else append empty
                strVersion += version[i] >= 0 ? $"{version[i]}." : "";
            }

            // Remove end string
            return strVersion.Remove(strVersion.Length - 1, 1);
        }

        public static string FormatVersionString(string version)
        {
            // Removes 'v' prefix
            return version.Replace("v", "");
        }

        public static async Task<string> CheckForUpdates()
        {
            try
            {
                string strCurrent = Assembly.GetExecutingAssembly().GetName().Version.ToString();
                string strLatest = await GetLatestVersion();

                Console.WriteLine($"Current Version: {strCurrent}");
                Console.WriteLine($"Latest Version: {strLatest}");

                int[] curVersion = VersionStringToIntArray(FormatVersionString(strCurrent));
                int[] latestVersion = VersionStringToIntArray(FormatVersionString(strLatest));

                return IsUpdateAvailable(curVersion, latestVersion) ? strLatest : "";
            }
            catch (Exception ex)
            {
                AppLogger.WriteLine($"Updater: Failed to check for updates. {ex}");
            }

            return "";
        }
    }
}




